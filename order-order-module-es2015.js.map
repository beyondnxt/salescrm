{"version":3,"sources":["./src/app/customer/index.ts","./src/app/order/order-form.component.ts","./src/app/order/order-form.component.html","./src/app/order/order-guard.service.ts","./src/app/order/order-list.component.ts","./src/app/order/order-list.component.html","./src/app/order/order.module.ts","./src/app/order/order.service.ts","./src/app/order/product-dialog.component.ts","./src/app/order/product-dialog.component.html","./src/app/product/index.ts"],"names":[],"mappings":"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","file":"order-order-module-es2015.js","sourcesContent":["export * from './customer-list.component';\nexport * from './customer-form.component';\n\nexport * from './customer.service';\nexport * from './customer.module';\nexport * from './customer'","import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  OnDestroy,\n  ViewChildren,\n  ElementRef,\n\n} from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControlName,\n\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/observable/fromEvent\";\nimport \"rxjs/add/observable/merge\";\nimport { Observable } from \"rxjs/Observable\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nimport { IOrder } from \"./order\";\nimport { OrderService } from \"./order.service\";\n\nimport { NumberValidators } from \"../shared/number.validator\";\nimport { GenericValidator } from \"../shared/generic-validator\";\nimport { CustomerService, Customer } from \"../customer\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProductDialogComponent } from \"./product-dialog.component\";\nimport { ConfirmDialog } from \"../shared\";\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Product } from '../product';\n\n@Component({\n  selector: 'order-form',\n  templateUrl: \"./order-form.component.html\",\n  styles: [`\n  .title-spacer {\n      flex: 1 1 auto;\n    }\n  .form-field{\n      width: 100%;\n      margin-left: 20px;\n      margin-right: 20px;\n    }\n    `],\n  providers: [ProductDialogComponent]\n})\nexport class OrderFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChildren(FormControlName, { read: ElementRef })\n  formInputElements: ElementRef[];\n  pageTitle: string = \"Update Order\";\n  errorMessage: string;\n  orderForm: FormGroup;\n  order: IOrder = <IOrder>{};\n  showImage: boolean;\n  customers: Customer[];\n  fieldColspan = 4;\n  // Use with the generic validation messcustomerId class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } } = {\n    reference: {\n      required: \"Order reference is required.\",\n      minlength: \"Order reference must be at least one characters.\",\n      maxlength: \"Order reference cannot exceed 100 characters.\"\n    },\n    amount: {\n      required: \"Order amount is required.\",\n      range:\n        \"Amount of the order must be between 1 (lowest) and 9999 (highest).\"\n    },\n    quantity: {\n      required: \"Order quantity is required.\",\n      range:\n        \"Quantity of the order must be between 1 (lowest) and 20 (highest).\"\n    },\n    customerId: {\n      required: \"Customer is required.\"\n    }\n  };\n  private sub: Subscription;\n  private genericValidator: GenericValidator;\n\n\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private customerService: CustomerService,\n    public dialog: MatDialog,\n    private breakpointObserver: BreakpointObserver\n  ) {\n    breakpointObserver.observe([\n      Breakpoints.HandsetLandscape,\n      Breakpoints.HandsetPortrait\n    ]).subscribe(result => {\n      this.onScreensizeChange();\n    });\n\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.orderForm = this.fb.group({\n      reference: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(100)\n        ]\n      ],\n      amount: [\"\", [Validators.required, NumberValidators.range(1, 99999)]],\n      quantity: [\"\", [Validators.required, NumberValidators.range(1, 20)]],\n      orderDate: [\"\"],\n      shippedDate: [\"\"],\n      address: [\"\", [Validators.required]],\n      city: [\"\", [Validators.required]],\n      country: [\"\", [Validators.required]],\n      zipcode: [\"\", [Validators.required]],\n      customerId: [\"\", Validators.required],\n      products: this.fb.array([]),\n      membership: false\n    });\n\n    // Read the order Id from the route parameter\n    this.sub = this.route.params.subscribe(params => {\n      let id = +params[\"id\"];\n      this.getOrder(id);\n    });\n\n    this.getCustomers();\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    let controlBlurs: Observable<any>[] = this.formInputElements.map(\n      (formControl: ElementRef) =>\n        Observable.fromEvent(formControl.nativeElement, \"blur\")\n    );\n\n    // Merge the blur event observable with the valueChanges observable\n    Observable.merge(this.orderForm.valueChanges, ...controlBlurs)\n      .debounceTime(800)\n      .subscribe(() => {\n        this.displayMessage = this.genericValidator.processMessages(\n          this.orderForm\n        );\n      });\n  }\n\n  getOrder(id: number): void {\n    this.orderService\n      .getOrder(id)\n      .subscribe(\n        (order: IOrder) => this.onOrderRetrieved(order),\n        (error: any) => (this.errorMessage = <any>error)\n      );\n  }\n\n  getCustomers() {\n    this.customerService.getCustomers().subscribe(customers => {\n      this.customers = customers;\n    }, error => (this.errorMessage = <any>error));\n  }\n\n  onOrderRetrieved(order: IOrder): void {\n    if (this.orderForm) {\n      this.orderForm.reset();\n    }\n    this.order = order;\n\n    if (this.order.id === 0) {\n      this.pageTitle = \"Add Order\";\n    } else {\n      this.pageTitle = `Update Order: ${this.order.reference} `;\n    }\n\n    // Update the data on the form\n    this.orderForm.patchValue({\n      reference: this.order.reference,\n      amount: this.order.amount,\n      quantity: this.order.products.length,\n      orderDate: new Date(this.order.orderDate),\n      shippedDate: new Date(this.order.shippedDate),\n      address: this.order.shipAddress.address,\n      city: this.order.shipAddress.city,\n      country: this.order.shipAddress.country,\n      zipcode: this.order.shipAddress.zipcode,\n      customerId: this.order.customerId,\n      membership: this.order.membership\n    });\n\n    const products = this.order.products.map(product =>\n      this.fb.group({\n        productName: [product.productName],\n        price: [product.unitPrice]\n      })\n    );\n    const productList = this.fb.array(products);\n    this.orderForm.setControl(\"products\", productList);\n  }\n\n  saveOrder(): void {\n    if (this.orderForm.dirty && this.orderForm.valid) {\n      // Copy the form values over the order object values\n      const order = Object.assign({}, this.order, this.orderForm.value);\n\n      this.orderService\n        .saveOrder(order)\n        .subscribe(\n          () => this.onSaveComplete(),\n          (error: any) => (this.errorMessage = <any>error)\n        );\n    } else if (!this.orderForm.dirty && this.orderForm.valid) {\n      this.onSaveComplete();\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.orderForm.reset();\n    this.router.navigate([\"/orders\"]);\n  }\n\n  addProduct(event: any): void {\n\n\n    let dialogRef = this.dialog.open(ProductDialogComponent, {\n      height: \"400px\",\n      width: \"600px\",\n      data: { title: \"Dialog\" }// message: \"Are you sure to add this item?\" }\n    });\n    dialogRef.disableClose = true;\n\n    dialogRef.afterClosed().subscribe(result => {\n      // this.selectedOption = result;\n      if (result === dialogRef.componentInstance.ACTION_SAVE) {\n        //     this.orderService.deleteOrder(id).subscribe(\n        //         () => {\n        //             this.orderService.getOrders()\n        //                 .subscribe(orders => {\n        //                     this.orders = orders;\n        //                     this.setPage(1);\n        //                 },\n        //                 error => this.errorMessage = <any>error);\n        //         },\n        //         (error: any) => {\n        //             this.errorMessage = <any>error;\n        //             console.log(this.errorMessage);\n        //             this.openSnackBar(\"This item has not been deleted successfully. Please try again.\", \"Close\");\n        //         }\n        //     );\n      }\n    });\n    event.preventDefault();\n  }\n\n\n  openDialog(product: Product) {\n    let dialogRef = this.dialog.open(ConfirmDialog, {\n      data: { title: \"Dialog\", message: \"Are you sure to delete this item?\" }\n    });\n    dialogRef.disableClose = true;\n\n    dialogRef.afterClosed().subscribe(() => {\n      // this.selectedOption = result;\n\n      // if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n      //   this.orderService.deleteOrder(id).subscribe(\n      //     () => {\n      //       this.orderService.getOrders().subscribe(orders => {\n      //         this.freshDataList(orders);\n      //       }, error => (this.errorMessage = <any>error));\n      //       this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n      //     },\n      //     (error: any) => {\n      //       this.errorMessage = <any>error;\n      //       console.log(this.errorMessage);\n      //       this.openSnackBar(\n      //         \"This item has not been deleted successfully. Please try again.\",\n      //         \"Close\"\n      //       );\n      //     }\n      //   );\n      // }\n    });\n  }\n\n  onScreensizeChange() {\n    // debugger\n    const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n    const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n    console.log(\n      ` isLess600  ${isLess600} \n        isLess1000 ${isLess1000}  `\n    )\n    if (isLess1000) {\n      if (isLess600) {\n        this.fieldColspan = 12;\n      }\n      else {\n        this.fieldColspan = 6;\n      }\n    }\n    else {\n      this.fieldColspan = 3;\n    }\n  }\n  deleteProduct(): void { }\n}\n","<form novalidate (ngSubmit)=\"saveOrder()\" [formGroup]=\"orderForm\">\n  <mat-card>\n\n    <mat-toolbar style=\"background-color: #FFF\">\n      <mat-toolbar-row>\n        <span class=\"view-card-title\"> {{pageTitle}}</span>\n        <span class=\"title-spacer\"></span>\n        <mat-card-actions>\n          <button mat-mini-fab class=\"primary\" style=\"margin-right:10px; background-color:darkgray\" type=\"submit\"\n            [disabled]='!orderForm.valid'>\n            <mat-icon>save</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"\" style=\"margin-right:10px; \" [routerLink]=\"['/orders']\">\n            <mat-icon>cancel</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"accent\" style=\"margin-right:10px; background-color:#e07c9e\"\n            (click)=\"addProduct($event)\">\n            <mat-icon>add</mat-icon>\n          </button>\n        </mat-card-actions>\n      </mat-toolbar-row>\n    </mat-toolbar>\n\n    <mat-card-content style=\"margin: 5 0 5 0px;\">\n      <div class=\"form-card\">\n        <mat-grid-list cols=\"12\" rowHeight=\"80px\">\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-select placeholder=\"Select Customer\" #customerIdId formControlName=\"customerId\"\n                [(value)]=\"order.customerId\">\n                <mat-option *ngFor=\"let customer of customers\" [value]=\"customer.id\">\n                  {{customer.firstname}} {{customer.lastname}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Reference No\" id=\"referenceId\" type=\"text\"\n                placeholder=\"Reference No. (required)\" formControlName=\"reference\" />\n              <mat-error *ngIf=\"displayMessage.reference\">\n                {{displayMessage.reference}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Amount\" id=\"amountId\" type=\"number\" placeholder=\"Price (required)\"\n                formControlName=\"amount\" />\n              <mat-error *ngIf=\"displayMessage.amount\">\n                {{displayMessage.amount}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Quantity\" id=\"quantityId\" type=\"number\" placeholder=\"Quantity (required)\"\n                formControlName=\"quantity\" />\n              <mat-error *ngIf=\"displayMessage.quantity\">\n                {{displayMessage.quantity}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput [matDatepicker]=\"orderpickerId\" placeholder=\"Order date\" [value]=\"order.orderDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"orderpickerId\"></mat-datepicker-toggle>\n              <mat-datepicker #orderpickerId></mat-datepicker>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput [matDatepicker]=\"shippedDateId\" placeholder=\"Shipped date\" [value]=\"order.shippedDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"shippedDateId\"></mat-datepicker-toggle>\n              <mat-datepicker #shippedDateId></mat-datepicker>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Address\" id=\"addressId\" type=\"text\" formControlName=\"address\" disabled />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.address\">\n                {{displayMessage.address}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"City\" id=\"cityId\" type=\"text\" formControlName=\"city\" />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.city\">\n                {{displayMessage.city}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Country\" id=\"countryId\" type=\"text\" formControlName=\"country\" />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.country\">\n                {{displayMessage.country}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Zipcode\" id=\"zipcodeId\" type=\"text\" formControlName=\"zipcode\" />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.zipcode\">\n                {{displayMessage.zipcode}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n        </mat-grid-list>\n      </div>\n\n      <!-- product list -->\n\n      <mat-list *ngIf=\"order!=null && order.products!=null\">\n        <h3 mat-subheader>Products</h3>\n        <mat-list-item style=\"background-color:#e7ecf7; padding-bottom:2px; margin-bottom:5px;\"\n          *ngFor=\"let product of order.products\">\n          <mat-icon mat-list-icon>folder</mat-icon>\n          <h4 mat-line>{{product.productName}} </h4>\n          <button mat-mini-fab style=\"background-color:lightgrey;float:right;\" (click)=\"openDialog(product)\">\n            <mat-icon>delete</mat-icon>\n          </button>\n          <p mat-line> AUD ${{product.unitPrice | number: '0.00' }} </p>\n        </mat-list-item>\n      </mat-list>\n      <div class='has-error' *ngIf='errorMessage'>{{errorMessage}}</div>\n    </mat-card-content>\n    <!-- </div> -->\n  </mat-card>\n</form>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  CanDeactivate\n} from \"@angular/router\";\nimport { OrderFormComponent } from \"./order-form.component\";\n\n@Injectable()\nexport class OrderDetailGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    let id = +route.url[1].path;\n    if (isNaN(id) || id < 1) {\n      alert(\"Invalid order Id\");\n      // start a new navigation to redirect to list pcustomerId\n      this.router.navigate([\"/orders\"]);\n      // abort current navigation\n      return false;\n    }\n    return true;\n  }\n}\n\n@Injectable()\nexport class OrderEditGuard implements CanDeactivate<OrderFormComponent> {\n  canDeactivate(component: OrderFormComponent): boolean {\n    if (component.orderForm.dirty) {\n      let orderName = component.orderForm.get(\"reference\").value || \"New Order\";\n      return confirm(`Navigate away and lose all changes to ${orderName}?`);\n    }\n    return true;\n  }\n}\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\n\nimport { IOrder } from \"./order\";\nimport { OrderService } from \"./order.service\";\nimport { PagerService } from \"../_services\";\nimport { ConfirmDialog } from \"../shared\";\nimport * as _ from \"lodash\";\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\nimport {MatDialog} from '@angular/material/dialog'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n@Component({\n  selector: 'order-list',\n  templateUrl: \"./order-list.component.html\",\n  styleUrls: [\"./order-list.component.css\"],\n  providers: [ConfirmDialog]\n})\nexport class OrderListComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  pageTitle: string = \"Orders\";\n\n  showImage: boolean = false;\n  listFilter: any = {};\n  errorMessage: string;\n  orders: IOrder[];\n  orderList: IOrder[]; //\n  displayedColumns = [\"reference\", \"quantity\", \"amount\", \"customerName\", \"orderDate\", \"shippedDate\", \"id\"];\n  dataSource: any = null; // new MatTableDataSource<Element>(ELEMENT_DATA);\n  pager: any = {};\n  pagedItems: any[];\n  totalAmount: number;\n  searchFilter: any = {\n    reference: \"\",\n    amount: \"\",\n    quantity: \"\"\n\n  };\n  selectedOption: string;\n\n\n\n  constructor(\n    private orderService: OrderService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) { }\n\n  toggleImage(): void {\n    this.showImage = !this.showImage;\n  }\n\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  freshDataList(orders: IOrder[]) {\n    this.orders = orders;\n    this.orderList = orders.map(e => {\n      let order = e;\n      e[\"customerName\"] = e.customer.firstname + \" \" + e.customer.lastname;\n      return order;\n    });\n    this.totalAmount = this.orders.length;\n    this.dataSource = new MatTableDataSource(this.orderList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  ngOnInit(): void {\n    this.orderService.getOrders().subscribe(orders => {\n      this.freshDataList(orders);\n    }, error => (this.errorMessage = <any>error));\n\n    this.searchFilter = {};\n    this.listFilter = {};\n  }\n\n  getOrders(pageNum?: number) {\n    this.orderService.getOrders().subscribe(orders => {\n      this.freshDataList(orders);\n\n    }, error => (this.errorMessage = <any>error));\n  }\n\n  searchOrders(filters: any) {\n    if (filters) {\n      this.orderService.getOrders().subscribe(orders => {\n        this.orders = orders;\n        console.log(this.orders.length);\n        this.orders = this.orders.filter((order: IOrder) => {\n          let match = true;\n\n          Object.keys(filters).forEach(k => {\n            match =\n              match && filters[k]\n                ? order[k]\n                  .toLocaleLowerCase()\n                  .indexOf(filters[k].toLocaleLowerCase()) > -1\n                : match;\n          })\n\n          this.freshDataList(orders);\n          return match;\n        });\n      }, error => (this.errorMessage = <any>error));\n    }\n  }\n\n  resetListFilter() {\n    this.listFilter = {};\n    this.getOrders();\n  }\n\n  reset() {\n    this.listFilter = {};\n    this.searchFilter = {};\n\n    this.getOrders();\n  }\n\n  resetSearchFilter(searchPanel: any) {\n    searchPanel.toggle();\n    this.searchFilter = {};\n\n    this.getOrders();\n  }\n\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 1500\n    });\n  }\n\n  openDialog(id: number) {\n    let dialogRef = this.dialog.open(ConfirmDialog, {\n      data: { title: \"Dialog\", message: \"Are you sure to delete this item?\" }\n    });\n    dialogRef.disableClose = true;\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.selectedOption = result;\n\n      if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n        this.orderService.deleteOrder(id).subscribe(\n          () => {\n            this.orderService.getOrders().subscribe(orders => {\n              this.freshDataList(orders);\n            }, error => (this.errorMessage = <any>error));\n            this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n          },\n          (error: any) => {\n            this.errorMessage = <any>error;\n            console.log(this.errorMessage);\n            this.openSnackBar(\n              \"This item has not been deleted successfully. Please try again.\",\n              \"Close\"\n            );\n          }\n        );\n      }\n    });\n  }\n}\n","<!-- <mat-sidenav-container> -->\n<mat-card class='light' style=\"height: 100%;\">\n  <mat-card-header>\n    <mat-card-title class=\"view-card-title\">\n      <h1>{{pageTitle }}</h1>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-toolbar>\n    <mat-toolbar-row>\n\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#e07c9e\" [routerLink]=\"['/orders/edit/', 0]\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#a28b6e\" (click)=\"sidenav.toggle()\">\n        <mat-icon>search</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:darkgray\" (click)=\"reset()\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n      <span class=\"title-spacer\"></span>\n\n      <mat-form-field appearance=\"standard\" class=\"search-form-fileld\">\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"applyFilter($event.target.value)\">\n        <mat-icon>filter_list</mat-icon>\n      </mat-form-field>\n\n\n    </mat-toolbar-row>\n  </mat-toolbar>\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"reference\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Reference No. </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\">\n        <!-- <a [routerLink]=\"['/order', order.id]\"> -->\n        {{order.reference}}\n        <!-- </a> -->\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"quantity\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.products.length}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"amount\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Amount </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.amount}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"customerName\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Customer </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.customerName}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"orderDate\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Order Date </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.orderDate | date }} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"shippedDate\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Shipped Date </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.shippedDate | date}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef style=\"justify-content:right;\">\n        <!-- <button mat-button style=\"color:white; background-color:darkgrey\" (click)=\"resetListFilter()\">Reset</button> -->\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\" style=\"justify-content:right;\">\n        <button mat-mini-fab style=\"background-color:teal; min-height: 30px;   margin: 5px;\"\n          [routerLink]=\"['/orders/edit/', order.id]\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-mini-fab style=\"background-color:lightblue; min-height: 30px;  margin: 5px;\"\n          (click)=\"openDialog(order.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n  </mat-table>\n  <mat-paginator #paginator [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10]\" [length]=\"totalAmount\">\n  </mat-paginator>\n</mat-card>\n<mat-sidenav class=\"search-panel\" position=\"end\" position=\"end\" dark #sidenav mode=\"push\" opened=\"false\">\n\n  <mat-card class=\"profile-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"avatar\">\n        <mat-icon>search</mat-icon>\n      </div>\n      <mat-card-title>\n        Advanced Search\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n  <mat-nav-list style=\"margin-left:20px;\">\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Reference No.\" name=\"reference\" [(ngModel)]=\"searchFilter.reference\"\n        #reference />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Order Date\" name=\"reference\" [(ngModel)]=\"searchFilter.orderDate\"\n        #reference />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Customer\" name=\"amount\" [(ngModel)]=\"searchFilter.customerName\"\n        #amount />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Customer Email\" name=\"quantity\" [(ngModel)]=\"searchFilter.customerEmail\"\n        #quantity />\n    </mat-form-field>\n  </mat-nav-list>\n  <mat-divider></mat-divider>\n  <mat-card-header>\n    <mat-action-list>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkgreen; margin:5px;\"\n        (click)=\"searchOrders(searchFilter);sidenav.toggle()\">\n        <mat-icon>search</mat-icon>Search\n      </button>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkred;margin:5px;\"\n        (click)=\"resetSearchFilter(sidenav)\">\n        <mat-icon>refresh</mat-icon>Reset\n      </button>\n    </mat-action-list>\n  </mat-card-header>\n</mat-sidenav>\n<!-- </mat-sidenav-container> -->\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { OrderListComponent } from \"./order-list.component\";\nimport { OrderDetailGuard, OrderEditGuard } from \"./order-guard.service\";\nimport { OrderFormComponent } from \"./order-form.component\";\nimport { ProductDialogComponent } from \"./product-dialog.component\";\n\nimport { OrderService } from \"./order.service\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { MaterialModule } from \"../shared/material.module\";\nimport { CustomerService } from '../customer';\nimport { ProductService } from '../product';\n@NgModule({\n  imports: [\n    SharedModule,\n    MaterialModule,\n    RouterModule.forChild([\n      { path: \"\", component: OrderListComponent },\n      {\n        path: \"edit/:id\",\n        canDeactivate: [OrderEditGuard],\n        component: OrderFormComponent\n      }\n    ])\n  ],\n  declarations: [\n    OrderListComponent,\n    OrderFormComponent,\n    ProductDialogComponent\n  ],\n  providers: [\n    OrderService,\n    OrderDetailGuard,\n    OrderEditGuard,\n    CustomerService,\n    ProductService\n  ],\n  exports: [\n    OrderListComponent,\n    OrderFormComponent\n  ]\n})\nexport class OrderModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\n\nimport { IOrder, IAddress } from './order';\nimport { Product } from '../product';\n\n@Injectable()\nexport class OrderService {\n  private basicAction = 'orders/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getOrders(): Observable<IOrder[]> {\n    // return this.http.get(this.basicAction)\n    const action = `${this.basicAction}?_expand=customer`;\n    return this.backend.getAll(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getOrder(id: number): Observable<IOrder> {\n    if (id === 0) {\n      return Observable.of(this.initializeOrder());\n    };\n    const action = `${this.basicAction}${id}?_expand=customer`;\n    return this.backend.getById(action)\n      .map(this.extractData)\n      .do(data => console.log('getOrder: ' + JSON.stringify(data)))\n      .catch(this.handleError);\n  }\n\n  deleteOrder(id: number): Observable<Response> {\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveOrder(order: IOrder): Observable<IOrder> {\n    if (order.id === 0) {\n      return this.createOrder(order);\n    }\n    return this.updateOrder(order);\n  }\n\n  private createOrder(order: IOrder): Observable<IOrder> {\n    order.id = undefined;\n    return this.backend.create(this.basicAction, order)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateOrder(order: IOrder): Observable<IOrder> {\n    const action = `${this.basicAction}${order.id}`;\n    return this.backend.update(action, order)\n      .map(() => order)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    const body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeOrder(): IOrder {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      reference: null,\n      amount: 0,\n      products: Array<Product>(),\n      orderDate: null,\n      shippedDate: null,\n      shipAddress: <IAddress>{},\n      customerId: 0,\n      quantity: 0,\n      membership: false,\n      customer: null,\n    };\n  }\n}\n","import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControlName } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog'\n\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Product } from '../product';\nimport { ProductService } from '../product';\n\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport { CustomerService, Customer } from \"../customer\";\n\n@Component({\n    templateUrl: './product-dialog.component.html',\n})\nexport class ProductDialogComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\n\n    public readonly ACTION_CANCEL: string = \"CANCEL\";\n    public readonly ACTION_SAVE: string = \"SAVE\";\n\n    pageTitle: string = 'Add product to order';\n    errorMessage: string;\n    productForm: FormGroup;\n\n    product: Product;\n    private sub: Subscription;\n    showImage: boolean;\n    customers: Customer[];\n\n    // Use with the generic validation messcustomerId class\n    displayMessage: { [key: string]: string } = {};\n    private validationMessages: { [key: string]: { [key: string]: string } };\n    private genericValidator: GenericValidator;\n\n    constructor(private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private productService: ProductService,\n        private customerService: CustomerService,\n        @Inject(MAT_DIALOG_DATA) public data: any, public dialogRef: MatDialogRef<ProductDialogComponent>\n    ) {\n\n        // Defines all of the validation messcustomerIds for the form.\n        // These could instead be retrieved from a file or database.\n        this.validationMessages = {\n            product: {\n                required: 'Product first name is required.',\n                minlength: 'Product first name must be at least one characters.',\n                maxlength: 'Product first name cannot exceed 100 characters.'\n            },\n            price: {\n                range: 'Rewards of the product must be between 1 (lowest) and 9999 (highest).'\n            },\n            quantity: {\n                range: 'Rewards of the product must be between 1 (lowest) and 20 (highest).'\n            },\n            customerId: {\n                range: 'Rewards of the product must be between 1 (lowest) and 99999 (highest).'\n            }\n        };\n\n        this.genericValidator = new GenericValidator(this.validationMessages);\n    }\n\n    ngOnInit(): void {\n        this.productForm = this.fb.group({\n            product: ['', [Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100)]],\n            price: ['', NumberValidators.range(1, 99999)],\n            quantity: ['', NumberValidators.range(1, 20)],\n            customerId: ['', NumberValidators.range(1, 9999999)],\n            membership: false,\n        });\n\n        // Read the product Id from the route parameter\n        this.sub = this.route.params.subscribe(\n            params => {\n                let id = +params['id'];\n                this.getProduct(id);\n            }\n        );\n\n        this.getCustomers();\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        // Watch for the blur event from any input element on the form.\n        let controlBlurs: Observable<any>[] = this.formInputElements\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\n\n        // Merge the blur event observable with the valueChanges observable\n        Observable.merge(this.productForm.valueChanges, ...controlBlurs).debounceTime(800).subscribe(() => {\n            this.displayMessage = this.genericValidator.processMessages(this.productForm);\n        });\n    }\n\n    getProduct(id: number): void {\n        this.productService.getProduct(id)\n            .subscribe(\n            (product: Product) => this.onProductRetrieved(product),\n            (error: any) => this.errorMessage = <any>error\n            );\n    }\n\n\n    getCustomers() {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.customers = customers;\n            },\n            error => this.errorMessage = <any>error);\n    }\n\n\n    onProductRetrieved(product: Product): void {\n        if (this.productForm) {\n            this.productForm.reset();\n        }\n        this.product = product;\n\n        if (this.product.id === 0) {\n            this.pageTitle = 'Add Product';\n        } else {\n            this.pageTitle = `Edit Product: ${this.product.productName} ${this.product.unitPrice}`;\n        }\n\n        // Update the data on the form\n        this.productForm.patchValue({\n            product: this.product.productName,\n            price: this.product.unitPrice,\n            quantity: this.product.unitInStock\n        });\n    }\n\n    deleteProduct(): void {\n        if (this.product.id === 0) {\n            // Don't delete, it was never saved.\n            this.onSaveComplete();\n        } else {\n            if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n                this.productService.deleteProduct(this.product.id)\n                    .subscribe(\n                    () => this.onSaveComplete(),\n                    (error: any) => this.errorMessage = <any>error\n                    );\n            }\n        }\n    }\n\n    saveProduct(): void {\n        if (this.productForm.dirty && this.productForm.valid) {\n            // Copy the form values over the product object values\n            let p = Object.assign({}, this.product, this.productForm.value);\n\n            this.productService.saveProduct(p)\n                .subscribe(\n                () => this.onSaveComplete(),\n                (error: any) => this.errorMessage = <any>error\n                );\n        } else if (!this.productForm.dirty) {\n            this.onSaveComplete();\n        }\n    }\n\n    onSaveComplete(): void {\n        // Reset the form to clear the flags\n        this.productForm.reset();\n        this.router.navigate(['/products']);\n    }\n}\n","<div mat-dialog-title>\n    {{pageTitle}}\n</div>\n<mat-dialog-content>\n    <form class=\"form-horizontal\" novalidate (ngSubmit)=\"saveProduct()\" [formGroup]=\"productForm\">\n        <!-- <div class=\"form-group\">\n                <img style=\"padding-left:100px;\" *ngIf='showImage && product.avatar' [src]='product.avatar' [title]='product.product | uppercase'\n                    [style.width.px]='imcustomerIdWidth' [style.margin.px]='imcustomerIdMargin'>\n            </div> -->\n        <!-- <div class=\"form-group\" [ngClass]=\"{'has-error': displayMessage.product }\">\n                <label class=\"col-md-2 control-label\" for=\"productId\">Product</label>\n\n                <div class=\"col-md-8\"> -->\n        <mat-form-field class=\"dialog-field \">\n            <input matInput #productId type=\"text\" placeholder=\"Product (required)\" formControlName=\"product\" />\n            <mat-error *ngIf=\"displayMessage.product \">\n                {{displayMessage.product}}\n            </mat-error>\n        </mat-form-field>\n\n        <mat-form-field class=\"dialog-field \">\n            <input matInput placeholder=\"Amount\" id=\"priceId\" type=\"number\" placeholder=\"Price (required)\" formControlName=\"price\" />\n            <mat-error *ngIf=\"displayMessage.price\">\n                {{displayMessage.price}}\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"dialog-field \">\n            <input matInput placeholder=\"Quantity\" id=\"quantityId\" type=\"number\" placeholder=\"Quantity (required)\" formControlName=\"quantity\"\n            />\n            <mat-error *ngIf=\"displayMessage.quantity\">\n                {{displayMessage.quantity}}\n            </mat-error>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button mat-raised-button [mat-dialog-close]=\"ACTION_SAVE\">Confirm</button>\n    <button mat-raised-button [mat-dialog-close]=\"ACTION_CANCEL\">Cancel</button>\n</mat-dialog-actions>>","export * from './product-list.component';\nexport * from './product-form.component';\n\nexport * from './product.service';\nexport * from './product.module';\nexport * from './product'"],"sourceRoot":"webpack:///"}