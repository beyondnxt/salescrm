{"version":3,"sources":["webpack:///node_modules/rxjs-compat/_esm2015/Observable.js","webpack:///src/app/shared/generic-validator.ts","webpack:///src/app/shared/index.ts","webpack:///src/app/shared/number.validator.ts"],"names":["GenericValidator","validationMessages","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","processMessages","Object","assign","dirty","touched","errors","keys","map","messageKey","NumberValidators","min","max","value","isNaN"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,O,CACA;;;;;;;;;;;;;;;;;;ACDA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,oE,CAEA;AACA;;;QACaA,gB;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAoBC,kBAApB,EAAsF;AAAA;;AAAlE,aAAAA,kBAAA,GAAAA,kBAAA;AAEnB,O,CAED;AACA;AACA;AACA;;;;;wCACgBC,S,EAAoB;AAAA;;AAChC,cAAIC,QAAQ,GAAG,EAAf;;AADgC,qCAEvBC,UAFuB;AAG5B,gBAAIF,SAAS,CAACG,QAAV,CAAmBC,cAAnB,CAAkCF,UAAlC,CAAJ,EAAmD;AAC/C,kBAAIG,CAAC,GAAGL,SAAS,CAACG,QAAV,CAAmBD,UAAnB,CAAR,CAD+C,CAE/C;;AACA,kBAAIG,CAAC,YAAY,wDAAjB,EAA4B;AACxB,oBAAIC,aAAa,GAAG,KAAI,CAACC,eAAL,CAAqBF,CAArB,CAApB;;AACAG,sBAAM,CAACC,MAAP,CAAcR,QAAd,EAAwBK,aAAxB;AACH,eAHD,MAGO;AACH;AACA,oBAAI,KAAI,CAACP,kBAAL,CAAwBG,UAAxB,CAAJ,EAAyC;AACrCD,0BAAQ,CAACC,UAAD,CAAR,GAAuB,EAAvB;;AACA,sBAAI,CAACG,CAAC,CAACK,KAAF,IAAWL,CAAC,CAACM,OAAd,KAA0BN,CAAC,CAACO,MAAhC,EAAwC;AACpCJ,0BAAM,CAACK,IAAP,CAAYR,CAAC,CAACO,MAAd,EAAsBE,GAAtB,CAA0B,UAAAC,UAAU,EAAI;AACpC,0BAAI,KAAI,CAAChB,kBAAL,CAAwBG,UAAxB,EAAoCa,UAApC,CAAJ,EAAqD;AACjDd,gCAAQ,CAACC,UAAD,CAAR,IAAwB,KAAI,CAACH,kBAAL,CAAwBG,UAAxB,EAAoCa,UAApC,IAAkD,GAA1E;AACH;AACJ,qBAJD;AAKH;AACJ;AACJ;AACJ;AAtB2B;;AAEhC,eAAK,IAAIb,UAAT,IAAuBF,SAAS,CAACG,QAAjC,EAA2C;AAAA,kBAAlCD,UAAkC;AAqB1C;;AACD,iBAAOD,QAAP;AACH;;;;;;;;;;;;;;;;;;;;;ACjDL;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACEA;AAAA;;;AAAA;AAAA;AAAA;;QAAae,gB;;;;;;;8BAEIC,G,EAAaC,G,EAAW;AACjC,iBAAO,UAACb,CAAD,EAA2D;AAC9D,gBAAIA,CAAC,CAACc,KAAF,KAAYC,KAAK,CAACf,CAAC,CAACc,KAAH,CAAL,IAAkBd,CAAC,CAACc,KAAF,GAAUF,GAA5B,IAAmCZ,CAAC,CAACc,KAAF,GAAUD,GAAzD,CAAJ,EAAmE;AAC/D,qBAAO;AAAE,yBAAS;AAAX,eAAP;AACH;;AACD,mBAAO,IAAP;AACH,WALD;AAMH","file":"product-product-module-es5.js","sourcesContent":["export { Observable } from 'rxjs';\n//# sourceMappingURL=Observable.js.map","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n\n    // Provide the set of valid validation messages\n    // Stucture:\n    // controlName1: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // },\n    // controlName2: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // }\n    constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\n\n    }\n\n    // Processes each control within a FormGroup\n    // And returns a set of validation messages to display\n    // Structure\n    // controlName1: 'Validation Message.',\n    processMessages(container: FormGroup): { [key: string]: string } {\n        let messages = {};\n        for (let controlKey in container.controls) {\n            if (container.controls.hasOwnProperty(controlKey)) {\n                let c = container.controls[controlKey];\n                // If it is a FormGroup, process its child controls.\n                if (c instanceof FormGroup) {\n                    let childMessages = this.processMessages(c);\n                    Object.assign(messages, childMessages);\n                } else {\n                    // Only validate if there are validation messages for the control\n                    if (this.validationMessages[controlKey]) {\n                        messages[controlKey] = '';\n                        if ((c.dirty || c.touched) && c.errors) {\n                            Object.keys(c.errors).map(messageKey => {\n                                if (this.validationMessages[controlKey][messageKey]) {\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return messages;\n    }\n}\n","export * from \"./number.validator\";\nexport * from \"./generic-validator\";\nexport * from \"./dialog.component\";\nexport * from \"./material.module\";\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class NumberValidators {\n\n    static range(min: number, max: number): ValidatorFn {\n        return (c: AbstractControl): { [key: string]: boolean } | null => {\n            if (c.value && (isNaN(c.value) || c.value < min || c.value > max)) {\n                return { 'range': true };\n            }\n            return null;\n        };\n    }\n}\n"]}