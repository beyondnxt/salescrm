{"version":3,"sources":["webpack:///src/app/customer/index.ts","webpack:///src/app/order/order-form.component.ts","webpack:///src/app/order/order-form.component.html","webpack:///src/app/order/order-guard.service.ts","webpack:///src/app/order/order-list.component.ts","webpack:///src/app/order/order-list.component.html","webpack:///src/app/order/order.module.ts","webpack:///src/app/order/order.service.ts","webpack:///src/app/order/product-dialog.component.ts","webpack:///src/app/order/product-dialog.component.html","webpack:///src/app/product/index.ts"],"names":["OrderFormComponent","fb","route","router","orderService","customerService","dialog","breakpointObserver","pageTitle","order","fieldColspan","displayMessage","validationMessages","reference","required","minlength","maxlength","amount","range","quantity","customerId","observe","HandsetLandscape","HandsetPortrait","subscribe","result","onScreensizeChange","genericValidator","orderForm","group","minLength","maxLength","orderDate","shippedDate","address","city","country","zipcode","products","array","membership","sub","params","id","getOrder","getCustomers","unsubscribe","controlBlurs","formInputElements","map","formControl","fromEvent","nativeElement","merge","valueChanges","debounceTime","processMessages","onOrderRetrieved","error","errorMessage","customers","reset","patchValue","length","Date","shipAddress","product","productName","price","unitPrice","productList","setControl","dirty","valid","Object","assign","value","saveOrder","onSaveComplete","navigate","event","dialogRef","open","height","width","data","title","disableClose","afterClosed","componentInstance","ACTION_SAVE","preventDefault","message","isLess600","isMatched","isLess1000","console","log","addProduct","selector","templateUrl","styles","providers","read","OrderDetailGuard","url","path","isNaN","alert","OrderEditGuard","component","orderName","get","confirm","OrderListComponent","snackBar","showImage","listFilter","displayedColumns","dataSource","pager","searchFilter","filterValue","trim","toLowerCase","filter","orders","orderList","e","customer","firstname","lastname","totalAmount","paginator","sort","getOrders","freshDataList","pageNum","filters","match","keys","forEach","k","toLocaleLowerCase","indexOf","searchPanel","toggle","action","duration","selectedOption","ACTION_CONFIRM","deleteOrder","openSnackBar","applyFilter","searchOrders","resetSearchFilter","styleUrls","OrderModule","forChild","canDeactivate","imports","declarations","exports","OrderService","http","backend","basicAction","getAll","extractData","handleError","of","initializeOrder","getById","JSON","stringify","createOrder","updateOrder","undefined","create","update","response","body","json","avatar","Array","ProductDialogComponent","productService","ACTION_CANCEL","productForm","getProduct","onProductRetrieved","unitInStock","deleteProduct","p","saveProduct"],"mappings":"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","file":"order-order-module-es5.js","sourcesContent":["export * from './customer-list.component';\nexport * from './customer-form.component';\n\nexport * from './customer.service';\nexport * from './customer.module';\nexport * from './customer'","import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  OnDestroy,\n  ViewChildren,\n  ElementRef,\n\n} from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControlName,\n\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/observable/fromEvent\";\nimport \"rxjs/add/observable/merge\";\nimport { Observable } from \"rxjs/Observable\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nimport { IOrder } from \"./order\";\nimport { OrderService } from \"./order.service\";\n\nimport { NumberValidators } from \"../shared/number.validator\";\nimport { GenericValidator } from \"../shared/generic-validator\";\nimport { CustomerService, Customer } from \"../customer\";\nimport { MatDialog } from '@angular/material/dialog';\nimport { ProductDialogComponent } from \"./product-dialog.component\";\nimport { ConfirmDialog } from \"../shared\";\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Product } from '../product';\n\n@Component({\n  selector: 'order-form',\n  templateUrl: \"./order-form.component.html\",\n  styles: [`\n  .title-spacer {\n      flex: 1 1 auto;\n    }\n  .form-field{\n      width: 100%;\n      margin-left: 20px;\n      margin-right: 20px;\n    }\n    `],\n  providers: [ProductDialogComponent]\n})\nexport class OrderFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChildren(FormControlName, { read: ElementRef })\n  formInputElements: ElementRef[];\n  pageTitle: string = \"Update Order\";\n  errorMessage: string;\n  orderForm: FormGroup;\n  order: IOrder = <IOrder>{};\n  showImage: boolean;\n  customers: Customer[];\n  fieldColspan = 4;\n  // Use with the generic validation messcustomerId class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } } = {\n    reference: {\n      required: \"Order reference is required.\",\n      minlength: \"Order reference must be at least one characters.\",\n      maxlength: \"Order reference cannot exceed 100 characters.\"\n    },\n    amount: {\n      required: \"Order amount is required.\",\n      range:\n        \"Amount of the order must be between 1 (lowest) and 9999 (highest).\"\n    },\n    quantity: {\n      required: \"Order quantity is required.\",\n      range:\n        \"Quantity of the order must be between 1 (lowest) and 20 (highest).\"\n    },\n    customerId: {\n      required: \"Customer is required.\"\n    }\n  };\n  private sub: Subscription;\n  private genericValidator: GenericValidator;\n\n\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private orderService: OrderService,\n    private customerService: CustomerService,\n    public dialog: MatDialog,\n    private breakpointObserver: BreakpointObserver\n  ) {\n    breakpointObserver.observe([\n      Breakpoints.HandsetLandscape,\n      Breakpoints.HandsetPortrait\n    ]).subscribe(result => {\n      this.onScreensizeChange();\n    });\n\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.orderForm = this.fb.group({\n      reference: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(100)\n        ]\n      ],\n      amount: [\"\", [Validators.required, NumberValidators.range(1, 99999)]],\n      quantity: [\"\", [Validators.required, NumberValidators.range(1, 20)]],\n      orderDate: [\"\"],\n      shippedDate: [\"\"],\n      address: [\"\", [Validators.required]],\n      city: [\"\", [Validators.required]],\n      country: [\"\", [Validators.required]],\n      zipcode: [\"\", [Validators.required]],\n      customerId: [\"\", Validators.required],\n      products: this.fb.array([]),\n      membership: false\n    });\n\n    // Read the order Id from the route parameter\n    this.sub = this.route.params.subscribe(params => {\n      let id = +params[\"id\"];\n      this.getOrder(id);\n    });\n\n    this.getCustomers();\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    let controlBlurs: Observable<any>[] = this.formInputElements.map(\n      (formControl: ElementRef) =>\n        Observable.fromEvent(formControl.nativeElement, \"blur\")\n    );\n\n    // Merge the blur event observable with the valueChanges observable\n    Observable.merge(this.orderForm.valueChanges, ...controlBlurs)\n      .debounceTime(800)\n      .subscribe(() => {\n        this.displayMessage = this.genericValidator.processMessages(\n          this.orderForm\n        );\n      });\n  }\n\n  getOrder(id: number): void {\n    this.orderService\n      .getOrder(id)\n      .subscribe(\n        (order: IOrder) => this.onOrderRetrieved(order),\n        (error: any) => (this.errorMessage = <any>error)\n      );\n  }\n\n  getCustomers() {\n    this.customerService.getCustomers().subscribe(customers => {\n      this.customers = customers;\n    }, error => (this.errorMessage = <any>error));\n  }\n\n  onOrderRetrieved(order: IOrder): void {\n    if (this.orderForm) {\n      this.orderForm.reset();\n    }\n    this.order = order;\n\n    if (this.order.id === 0) {\n      this.pageTitle = \"Add Order\";\n    } else {\n      this.pageTitle = `Update Order: ${this.order.reference} `;\n    }\n\n    // Update the data on the form\n    this.orderForm.patchValue({\n      reference: this.order.reference,\n      amount: this.order.amount,\n      quantity: this.order.products.length,\n      orderDate: new Date(this.order.orderDate),\n      shippedDate: new Date(this.order.shippedDate),\n      address: this.order.shipAddress.address,\n      city: this.order.shipAddress.city,\n      country: this.order.shipAddress.country,\n      zipcode: this.order.shipAddress.zipcode,\n      customerId: this.order.customerId,\n      membership: this.order.membership\n    });\n\n    const products = this.order.products.map(product =>\n      this.fb.group({\n        productName: [product.productName],\n        price: [product.unitPrice]\n      })\n    );\n    const productList = this.fb.array(products);\n    this.orderForm.setControl(\"products\", productList);\n  }\n\n  saveOrder(): void {\n    if (this.orderForm.dirty && this.orderForm.valid) {\n      // Copy the form values over the order object values\n      const order = Object.assign({}, this.order, this.orderForm.value);\n\n      this.orderService\n        .saveOrder(order)\n        .subscribe(\n          () => this.onSaveComplete(),\n          (error: any) => (this.errorMessage = <any>error)\n        );\n    } else if (!this.orderForm.dirty && this.orderForm.valid) {\n      this.onSaveComplete();\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.orderForm.reset();\n    this.router.navigate([\"/orders\"]);\n  }\n\n  addProduct(event: any): void {\n\n\n    let dialogRef = this.dialog.open(ProductDialogComponent, {\n      height: \"400px\",\n      width: \"600px\",\n      data: { title: \"Dialog\" }// message: \"Are you sure to add this item?\" }\n    });\n    dialogRef.disableClose = true;\n\n    dialogRef.afterClosed().subscribe(result => {\n      // this.selectedOption = result;\n      if (result === dialogRef.componentInstance.ACTION_SAVE) {\n        //     this.orderService.deleteOrder(id).subscribe(\n        //         () => {\n        //             this.orderService.getOrders()\n        //                 .subscribe(orders => {\n        //                     this.orders = orders;\n        //                     this.setPage(1);\n        //                 },\n        //                 error => this.errorMessage = <any>error);\n        //         },\n        //         (error: any) => {\n        //             this.errorMessage = <any>error;\n        //             console.log(this.errorMessage);\n        //             this.openSnackBar(\"This item has not been deleted successfully. Please try again.\", \"Close\");\n        //         }\n        //     );\n      }\n    });\n    event.preventDefault();\n  }\n\n\n  openDialog(product: Product) {\n    let dialogRef = this.dialog.open(ConfirmDialog, {\n      data: { title: \"Dialog\", message: \"Are you sure to delete this item?\" }\n    });\n    dialogRef.disableClose = true;\n\n    dialogRef.afterClosed().subscribe(() => {\n      // this.selectedOption = result;\n\n      // if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n      //   this.orderService.deleteOrder(id).subscribe(\n      //     () => {\n      //       this.orderService.getOrders().subscribe(orders => {\n      //         this.freshDataList(orders);\n      //       }, error => (this.errorMessage = <any>error));\n      //       this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n      //     },\n      //     (error: any) => {\n      //       this.errorMessage = <any>error;\n      //       console.log(this.errorMessage);\n      //       this.openSnackBar(\n      //         \"This item has not been deleted successfully. Please try again.\",\n      //         \"Close\"\n      //       );\n      //     }\n      //   );\n      // }\n    });\n  }\n\n  onScreensizeChange() {\n    // debugger\n    const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n    const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n    console.log(\n      ` isLess600  ${isLess600} \n        isLess1000 ${isLess1000}  `\n    )\n    if (isLess1000) {\n      if (isLess600) {\n        this.fieldColspan = 12;\n      }\n      else {\n        this.fieldColspan = 6;\n      }\n    }\n    else {\n      this.fieldColspan = 3;\n    }\n  }\n  deleteProduct(): void { }\n}\n","<form novalidate (ngSubmit)=\"saveOrder()\" [formGroup]=\"orderForm\">\n  <mat-card>\n\n    <mat-toolbar style=\"background-color: #FFF\">\n      <mat-toolbar-row>\n        <span class=\"view-card-title\"> {{pageTitle}}</span>\n        <span class=\"title-spacer\"></span>\n        <mat-card-actions>\n          <button mat-mini-fab class=\"primary\" style=\"margin-right:10px; background-color:darkgray\" type=\"submit\"\n            [disabled]='!orderForm.valid'>\n            <mat-icon>save</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"\" style=\"margin-right:10px; \" [routerLink]=\"['/orders']\">\n            <mat-icon>cancel</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"accent\" style=\"margin-right:10px; background-color:#e07c9e\"\n            (click)=\"addProduct($event)\">\n            <mat-icon>add</mat-icon>\n          </button>\n        </mat-card-actions>\n      </mat-toolbar-row>\n    </mat-toolbar>\n\n    <mat-card-content style=\"margin: 5 0 5 0px;\">\n      <div class=\"form-card\">\n        <mat-grid-list cols=\"12\" rowHeight=\"80px\">\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-select placeholder=\"Select Customer\" #customerIdId formControlName=\"customerId\"\n                [(value)]=\"order.customerId\">\n                <mat-option *ngFor=\"let customer of customers\" [value]=\"customer.id\">\n                  {{customer.firstname}} {{customer.lastname}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Reference No\" id=\"referenceId\" type=\"text\"\n                placeholder=\"Reference No. (required)\" formControlName=\"reference\" />\n              <mat-error *ngIf=\"displayMessage.reference\">\n                {{displayMessage.reference}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Amount\" id=\"amountId\" type=\"number\" placeholder=\"Price (required)\"\n                formControlName=\"amount\" />\n              <mat-error *ngIf=\"displayMessage.amount\">\n                {{displayMessage.amount}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Quantity\" id=\"quantityId\" type=\"number\" placeholder=\"Quantity (required)\"\n                formControlName=\"quantity\" />\n              <mat-error *ngIf=\"displayMessage.quantity\">\n                {{displayMessage.quantity}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput [matDatepicker]=\"orderpickerId\" placeholder=\"Order date\" [value]=\"order.orderDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"orderpickerId\"></mat-datepicker-toggle>\n              <mat-datepicker #orderpickerId></mat-datepicker>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput [matDatepicker]=\"shippedDateId\" placeholder=\"Shipped date\" [value]=\"order.shippedDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"shippedDateId\"></mat-datepicker-toggle>\n              <mat-datepicker #shippedDateId></mat-datepicker>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Address\" id=\"addressId\" type=\"text\" formControlName=\"address\" disabled />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.address\">\n                {{displayMessage.address}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"City\" id=\"cityId\" type=\"text\" formControlName=\"city\" />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.city\">\n                {{displayMessage.city}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Country\" id=\"countryId\" type=\"text\" formControlName=\"country\" />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.country\">\n                {{displayMessage.country}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Zipcode\" id=\"zipcodeId\" type=\"text\" formControlName=\"zipcode\" />\n              <mat-error class=\"help-block\" *ngIf=\"displayMessage.zipcode\">\n                {{displayMessage.zipcode}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n        </mat-grid-list>\n      </div>\n\n      <!-- product list -->\n\n      <mat-list *ngIf=\"order!=null && order.products!=null\">\n        <h3 mat-subheader>Products</h3>\n        <mat-list-item style=\"background-color:#e7ecf7; padding-bottom:2px; margin-bottom:5px;\"\n          *ngFor=\"let product of order.products\">\n          <mat-icon mat-list-icon>folder</mat-icon>\n          <h4 mat-line>{{product.productName}} </h4>\n          <button mat-mini-fab style=\"background-color:lightgrey;float:right;\" (click)=\"openDialog(product)\">\n            <mat-icon>delete</mat-icon>\n          </button>\n          <p mat-line> AUD ${{product.unitPrice | number: '0.00' }} </p>\n        </mat-list-item>\n      </mat-list>\n      <div class='has-error' *ngIf='errorMessage'>{{errorMessage}}</div>\n    </mat-card-content>\n    <!-- </div> -->\n  </mat-card>\n</form>\n","import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  CanDeactivate\n} from \"@angular/router\";\nimport { OrderFormComponent } from \"./order-form.component\";\n\n@Injectable()\nexport class OrderDetailGuard implements CanActivate {\n  constructor(private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot): boolean {\n    let id = +route.url[1].path;\n    if (isNaN(id) || id < 1) {\n      alert(\"Invalid order Id\");\n      // start a new navigation to redirect to list pcustomerId\n      this.router.navigate([\"/orders\"]);\n      // abort current navigation\n      return false;\n    }\n    return true;\n  }\n}\n\n@Injectable()\nexport class OrderEditGuard implements CanDeactivate<OrderFormComponent> {\n  canDeactivate(component: OrderFormComponent): boolean {\n    if (component.orderForm.dirty) {\n      let orderName = component.orderForm.get(\"reference\").value || \"New Order\";\n      return confirm(`Navigate away and lose all changes to ${orderName}?`);\n    }\n    return true;\n  }\n}\n","import { Component, OnInit, ViewChild } from \"@angular/core\";\n\nimport { IOrder } from \"./order\";\nimport { OrderService } from \"./order.service\";\nimport { PagerService } from \"../_services\";\nimport { ConfirmDialog } from \"../shared\";\nimport * as _ from \"lodash\";\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\nimport {MatDialog} from '@angular/material/dialog'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n@Component({\n  selector: 'order-list',\n  templateUrl: \"./order-list.component.html\",\n  styleUrls: [\"./order-list.component.css\"],\n  providers: [ConfirmDialog]\n})\nexport class OrderListComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  pageTitle: string = \"Orders\";\n\n  showImage: boolean = false;\n  listFilter: any = {};\n  errorMessage: string;\n  orders: IOrder[];\n  orderList: IOrder[]; //\n  displayedColumns = [\"reference\", \"quantity\", \"amount\", \"customerName\", \"orderDate\", \"shippedDate\", \"id\"];\n  dataSource: any = null; // new MatTableDataSource<Element>(ELEMENT_DATA);\n  pager: any = {};\n  pagedItems: any[];\n  totalAmount: number;\n  searchFilter: any = {\n    reference: \"\",\n    amount: \"\",\n    quantity: \"\"\n\n  };\n  selectedOption: string;\n\n\n\n  constructor(\n    private orderService: OrderService,\n    public dialog: MatDialog,\n    public snackBar: MatSnackBar\n  ) { }\n\n  toggleImage(): void {\n    this.showImage = !this.showImage;\n  }\n\n\n  applyFilter(filterValue: string) {\n    filterValue = filterValue.trim(); // Remove whitespace\n    filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n    this.dataSource.filter = filterValue;\n  }\n\n  freshDataList(orders: IOrder[]) {\n    this.orders = orders;\n    this.orderList = orders.map(e => {\n      let order = e;\n      e[\"customerName\"] = e.customer.firstname + \" \" + e.customer.lastname;\n      return order;\n    });\n    this.totalAmount = this.orders.length;\n    this.dataSource = new MatTableDataSource(this.orderList);\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  ngOnInit(): void {\n    this.orderService.getOrders().subscribe(orders => {\n      this.freshDataList(orders);\n    }, error => (this.errorMessage = <any>error));\n\n    this.searchFilter = {};\n    this.listFilter = {};\n  }\n\n  getOrders(pageNum?: number) {\n    this.orderService.getOrders().subscribe(orders => {\n      this.freshDataList(orders);\n\n    }, error => (this.errorMessage = <any>error));\n  }\n\n  searchOrders(filters: any) {\n    if (filters) {\n      this.orderService.getOrders().subscribe(orders => {\n        this.orders = orders;\n        console.log(this.orders.length);\n        this.orders = this.orders.filter((order: IOrder) => {\n          let match = true;\n\n          Object.keys(filters).forEach(k => {\n            match =\n              match && filters[k]\n                ? order[k]\n                  .toLocaleLowerCase()\n                  .indexOf(filters[k].toLocaleLowerCase()) > -1\n                : match;\n          })\n\n          this.freshDataList(orders);\n          return match;\n        });\n      }, error => (this.errorMessage = <any>error));\n    }\n  }\n\n  resetListFilter() {\n    this.listFilter = {};\n    this.getOrders();\n  }\n\n  reset() {\n    this.listFilter = {};\n    this.searchFilter = {};\n\n    this.getOrders();\n  }\n\n  resetSearchFilter(searchPanel: any) {\n    searchPanel.toggle();\n    this.searchFilter = {};\n\n    this.getOrders();\n  }\n\n  openSnackBar(message: string, action: string) {\n    this.snackBar.open(message, action, {\n      duration: 1500\n    });\n  }\n\n  openDialog(id: number) {\n    let dialogRef = this.dialog.open(ConfirmDialog, {\n      data: { title: \"Dialog\", message: \"Are you sure to delete this item?\" }\n    });\n    dialogRef.disableClose = true;\n\n    dialogRef.afterClosed().subscribe(result => {\n      this.selectedOption = result;\n\n      if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n        this.orderService.deleteOrder(id).subscribe(\n          () => {\n            this.orderService.getOrders().subscribe(orders => {\n              this.freshDataList(orders);\n            }, error => (this.errorMessage = <any>error));\n            this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n          },\n          (error: any) => {\n            this.errorMessage = <any>error;\n            console.log(this.errorMessage);\n            this.openSnackBar(\n              \"This item has not been deleted successfully. Please try again.\",\n              \"Close\"\n            );\n          }\n        );\n      }\n    });\n  }\n}\n","<!-- <mat-sidenav-container> -->\n<mat-card class='light' style=\"height: 100%;\">\n  <mat-card-header>\n    <mat-card-title class=\"view-card-title\">\n      <h1>{{pageTitle }}</h1>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-toolbar>\n    <mat-toolbar-row>\n\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#e07c9e\" [routerLink]=\"['/orders/edit/', 0]\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#a28b6e\" (click)=\"sidenav.toggle()\">\n        <mat-icon>search</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:darkgray\" (click)=\"reset()\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n      <span class=\"title-spacer\"></span>\n\n      <mat-form-field appearance=\"standard\" class=\"search-form-fileld\">\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"applyFilter($event.target.value)\">\n        <mat-icon>filter_list</mat-icon>\n      </mat-form-field>\n\n\n    </mat-toolbar-row>\n  </mat-toolbar>\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"reference\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Reference No. </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\">\n        <!-- <a [routerLink]=\"['/order', order.id]\"> -->\n        {{order.reference}}\n        <!-- </a> -->\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"quantity\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Quantity </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.products.length}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"amount\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Amount </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.amount}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"customerName\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Customer </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.customerName}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"orderDate\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Order Date </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.orderDate | date }} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"shippedDate\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Shipped Date </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\"> {{order.shippedDate | date}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef style=\"justify-content:right;\">\n        <!-- <button mat-button style=\"color:white; background-color:darkgrey\" (click)=\"resetListFilter()\">Reset</button> -->\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let order\" style=\"justify-content:right;\">\n        <button mat-mini-fab style=\"background-color:teal; min-height: 30px;   margin: 5px;\"\n          [routerLink]=\"['/orders/edit/', order.id]\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-mini-fab style=\"background-color:lightblue; min-height: 30px;  margin: 5px;\"\n          (click)=\"openDialog(order.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n  </mat-table>\n  <mat-paginator #paginator [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10]\" [length]=\"totalAmount\">\n  </mat-paginator>\n</mat-card>\n<mat-sidenav class=\"search-panel\" position=\"end\" position=\"end\" dark #sidenav mode=\"push\" opened=\"false\">\n\n  <mat-card class=\"profile-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"avatar\">\n        <mat-icon>search</mat-icon>\n      </div>\n      <mat-card-title>\n        Advanced Search\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n  <mat-nav-list style=\"margin-left:20px;\">\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Reference No.\" name=\"reference\" [(ngModel)]=\"searchFilter.reference\"\n        #reference />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Order Date\" name=\"reference\" [(ngModel)]=\"searchFilter.orderDate\"\n        #reference />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Customer\" name=\"amount\" [(ngModel)]=\"searchFilter.customerName\"\n        #amount />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Customer Email\" name=\"quantity\" [(ngModel)]=\"searchFilter.customerEmail\"\n        #quantity />\n    </mat-form-field>\n  </mat-nav-list>\n  <mat-divider></mat-divider>\n  <mat-card-header>\n    <mat-action-list>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkgreen; margin:5px;\"\n        (click)=\"searchOrders(searchFilter);sidenav.toggle()\">\n        <mat-icon>search</mat-icon>Search\n      </button>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkred;margin:5px;\"\n        (click)=\"resetSearchFilter(sidenav)\">\n        <mat-icon>refresh</mat-icon>Reset\n      </button>\n    </mat-action-list>\n  </mat-card-header>\n</mat-sidenav>\n<!-- </mat-sidenav-container> -->\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { OrderListComponent } from \"./order-list.component\";\nimport { OrderDetailGuard, OrderEditGuard } from \"./order-guard.service\";\nimport { OrderFormComponent } from \"./order-form.component\";\nimport { ProductDialogComponent } from \"./product-dialog.component\";\n\nimport { OrderService } from \"./order.service\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { MaterialModule } from \"../shared/material.module\";\nimport { CustomerService } from '../customer';\nimport { ProductService } from '../product';\n@NgModule({\n  imports: [\n    SharedModule,\n    MaterialModule,\n    RouterModule.forChild([\n      { path: \"\", component: OrderListComponent },\n      {\n        path: \"edit/:id\",\n        canDeactivate: [OrderEditGuard],\n        component: OrderFormComponent\n      }\n    ])\n  ],\n  declarations: [\n    OrderListComponent,\n    OrderFormComponent,\n    ProductDialogComponent\n  ],\n  providers: [\n    OrderService,\n    OrderDetailGuard,\n    OrderEditGuard,\n    CustomerService,\n    ProductService\n  ],\n  exports: [\n    OrderListComponent,\n    OrderFormComponent\n  ]\n})\nexport class OrderModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\n\nimport { IOrder, IAddress } from './order';\nimport { Product } from '../product';\n\n@Injectable()\nexport class OrderService {\n  private basicAction = 'orders/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getOrders(): Observable<IOrder[]> {\n    // return this.http.get(this.basicAction)\n    const action = `${this.basicAction}?_expand=customer`;\n    return this.backend.getAll(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getOrder(id: number): Observable<IOrder> {\n    if (id === 0) {\n      return Observable.of(this.initializeOrder());\n    };\n    const action = `${this.basicAction}${id}?_expand=customer`;\n    return this.backend.getById(action)\n      .map(this.extractData)\n      .do(data => console.log('getOrder: ' + JSON.stringify(data)))\n      .catch(this.handleError);\n  }\n\n  deleteOrder(id: number): Observable<Response> {\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveOrder(order: IOrder): Observable<IOrder> {\n    if (order.id === 0) {\n      return this.createOrder(order);\n    }\n    return this.updateOrder(order);\n  }\n\n  private createOrder(order: IOrder): Observable<IOrder> {\n    order.id = undefined;\n    return this.backend.create(this.basicAction, order)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateOrder(order: IOrder): Observable<IOrder> {\n    const action = `${this.basicAction}${order.id}`;\n    return this.backend.update(action, order)\n      .map(() => order)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    const body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeOrder(): IOrder {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      reference: null,\n      amount: 0,\n      products: Array<Product>(),\n      orderDate: null,\n      shippedDate: null,\n      shipAddress: <IAddress>{},\n      customerId: 0,\n      quantity: 0,\n      membership: false,\n      customer: null,\n    };\n  }\n}\n","import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControlName } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Inject } from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog'\n\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Product } from '../product';\nimport { ProductService } from '../product';\n\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport { CustomerService, Customer } from \"../customer\";\n\n@Component({\n    templateUrl: './product-dialog.component.html',\n})\nexport class ProductDialogComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\n\n    public readonly ACTION_CANCEL: string = \"CANCEL\";\n    public readonly ACTION_SAVE: string = \"SAVE\";\n\n    pageTitle: string = 'Add product to order';\n    errorMessage: string;\n    productForm: FormGroup;\n\n    product: Product;\n    private sub: Subscription;\n    showImage: boolean;\n    customers: Customer[];\n\n    // Use with the generic validation messcustomerId class\n    displayMessage: { [key: string]: string } = {};\n    private validationMessages: { [key: string]: { [key: string]: string } };\n    private genericValidator: GenericValidator;\n\n    constructor(private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private productService: ProductService,\n        private customerService: CustomerService,\n        @Inject(MAT_DIALOG_DATA) public data: any, public dialogRef: MatDialogRef<ProductDialogComponent>\n    ) {\n\n        // Defines all of the validation messcustomerIds for the form.\n        // These could instead be retrieved from a file or database.\n        this.validationMessages = {\n            product: {\n                required: 'Product first name is required.',\n                minlength: 'Product first name must be at least one characters.',\n                maxlength: 'Product first name cannot exceed 100 characters.'\n            },\n            price: {\n                range: 'Rewards of the product must be between 1 (lowest) and 9999 (highest).'\n            },\n            quantity: {\n                range: 'Rewards of the product must be between 1 (lowest) and 20 (highest).'\n            },\n            customerId: {\n                range: 'Rewards of the product must be between 1 (lowest) and 99999 (highest).'\n            }\n        };\n\n        this.genericValidator = new GenericValidator(this.validationMessages);\n    }\n\n    ngOnInit(): void {\n        this.productForm = this.fb.group({\n            product: ['', [Validators.required,\n            Validators.minLength(3),\n            Validators.maxLength(100)]],\n            price: ['', NumberValidators.range(1, 99999)],\n            quantity: ['', NumberValidators.range(1, 20)],\n            customerId: ['', NumberValidators.range(1, 9999999)],\n            membership: false,\n        });\n\n        // Read the product Id from the route parameter\n        this.sub = this.route.params.subscribe(\n            params => {\n                let id = +params['id'];\n                this.getProduct(id);\n            }\n        );\n\n        this.getCustomers();\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        // Watch for the blur event from any input element on the form.\n        let controlBlurs: Observable<any>[] = this.formInputElements\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\n\n        // Merge the blur event observable with the valueChanges observable\n        Observable.merge(this.productForm.valueChanges, ...controlBlurs).debounceTime(800).subscribe(() => {\n            this.displayMessage = this.genericValidator.processMessages(this.productForm);\n        });\n    }\n\n    getProduct(id: number): void {\n        this.productService.getProduct(id)\n            .subscribe(\n            (product: Product) => this.onProductRetrieved(product),\n            (error: any) => this.errorMessage = <any>error\n            );\n    }\n\n\n    getCustomers() {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.customers = customers;\n            },\n            error => this.errorMessage = <any>error);\n    }\n\n\n    onProductRetrieved(product: Product): void {\n        if (this.productForm) {\n            this.productForm.reset();\n        }\n        this.product = product;\n\n        if (this.product.id === 0) {\n            this.pageTitle = 'Add Product';\n        } else {\n            this.pageTitle = `Edit Product: ${this.product.productName} ${this.product.unitPrice}`;\n        }\n\n        // Update the data on the form\n        this.productForm.patchValue({\n            product: this.product.productName,\n            price: this.product.unitPrice,\n            quantity: this.product.unitInStock\n        });\n    }\n\n    deleteProduct(): void {\n        if (this.product.id === 0) {\n            // Don't delete, it was never saved.\n            this.onSaveComplete();\n        } else {\n            if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n                this.productService.deleteProduct(this.product.id)\n                    .subscribe(\n                    () => this.onSaveComplete(),\n                    (error: any) => this.errorMessage = <any>error\n                    );\n            }\n        }\n    }\n\n    saveProduct(): void {\n        if (this.productForm.dirty && this.productForm.valid) {\n            // Copy the form values over the product object values\n            let p = Object.assign({}, this.product, this.productForm.value);\n\n            this.productService.saveProduct(p)\n                .subscribe(\n                () => this.onSaveComplete(),\n                (error: any) => this.errorMessage = <any>error\n                );\n        } else if (!this.productForm.dirty) {\n            this.onSaveComplete();\n        }\n    }\n\n    onSaveComplete(): void {\n        // Reset the form to clear the flags\n        this.productForm.reset();\n        this.router.navigate(['/products']);\n    }\n}\n","<div mat-dialog-title>\n    {{pageTitle}}\n</div>\n<mat-dialog-content>\n    <form class=\"form-horizontal\" novalidate (ngSubmit)=\"saveProduct()\" [formGroup]=\"productForm\">\n        <!-- <div class=\"form-group\">\n                <img style=\"padding-left:100px;\" *ngIf='showImage && product.avatar' [src]='product.avatar' [title]='product.product | uppercase'\n                    [style.width.px]='imcustomerIdWidth' [style.margin.px]='imcustomerIdMargin'>\n            </div> -->\n        <!-- <div class=\"form-group\" [ngClass]=\"{'has-error': displayMessage.product }\">\n                <label class=\"col-md-2 control-label\" for=\"productId\">Product</label>\n\n                <div class=\"col-md-8\"> -->\n        <mat-form-field class=\"dialog-field \">\n            <input matInput #productId type=\"text\" placeholder=\"Product (required)\" formControlName=\"product\" />\n            <mat-error *ngIf=\"displayMessage.product \">\n                {{displayMessage.product}}\n            </mat-error>\n        </mat-form-field>\n\n        <mat-form-field class=\"dialog-field \">\n            <input matInput placeholder=\"Amount\" id=\"priceId\" type=\"number\" placeholder=\"Price (required)\" formControlName=\"price\" />\n            <mat-error *ngIf=\"displayMessage.price\">\n                {{displayMessage.price}}\n            </mat-error>\n        </mat-form-field>\n        <mat-form-field class=\"dialog-field \">\n            <input matInput placeholder=\"Quantity\" id=\"quantityId\" type=\"number\" placeholder=\"Quantity (required)\" formControlName=\"quantity\"\n            />\n            <mat-error *ngIf=\"displayMessage.quantity\">\n                {{displayMessage.quantity}}\n            </mat-error>\n        </mat-form-field>\n    </form>\n</mat-dialog-content>\n<mat-dialog-actions>\n    <button mat-raised-button [mat-dialog-close]=\"ACTION_SAVE\">Confirm</button>\n    <button mat-raised-button [mat-dialog-close]=\"ACTION_CANCEL\">Cancel</button>\n</mat-dialog-actions>>","export * from './product-list.component';\nexport * from './product-form.component';\n\nexport * from './product.service';\nexport * from './product.module';\nexport * from './product'"]}