{"version":3,"sources":["webpack:///node_modules/rxjs-compat/_esm2015/Observable.js","webpack:///src/app/customer/customer-form.component.ts","webpack:///src/app/customer/customer-form.component.html","webpack:///src/app/customer/customer-guard.service.ts","webpack:///src/app/customer/customer-list.component.ts","webpack:///src/app/customer/customer-list.component.html","webpack:///src/app/customer/customer.module.ts","webpack:///src/app/customer/customer.service.ts","webpack:///src/app/shared/generic-validator.ts","webpack:///src/app/shared/index.ts","webpack:///src/app/shared/number.validator.ts"],"names":["CustomerFormComponent","fb","route","router","customerService","breakpointObserver","pageTitle","customer","imageWidth","imageMargin","fieldColspan","displayMessage","validationMessages","firstname","required","minlength","maxlength","lastname","email","rewards","range","phone","mobile","observe","HandsetLandscape","HandsetPortrait","subscribe","result","onScreensizeChange","genericValidator","customerForm","group","minLength","maxLength","membership","sub","params","id","getCustomer","add","unsubscribe","controlBlurs","formInputElements","map","formControl","fromEvent","nativeElement","merge","valueChanges","debounceTime","value","processMessages","onCustomerRetrieved","error","errorMessage","reset","patchValue","onSaveComplete","confirm","deleteCustomer","event","preventDefault","showImage","dirty","valid","Object","assign","saveCustomer","navigate","isLess600","isMatched","isLess1000","console","log","selector","templateUrl","styles","read","CustomerDetailGuard","url","path","isNaN","alert","CustomerEditGuard","component","customerName","get","CustomerListComponent","dialog","snackBar","listFilter","displayedColumns","dataSource","pager","searchFilter","filterValue","trim","toLowerCase","filter","customers","paginator","sort","getCustomers","freshDataList","pageNum","filters","length","match","keys","forEach","k","toLocaleLowerCase","indexOf","searchPanel","toggle","message","action","open","duration","dialogRef","data","title","disableClose","afterClosed","selectedOption","componentInstance","ACTION_CONFIRM","openSnackBar","applyFilter","searchCustomers","resetSearchFilter","styleUrls","providers","CustomerModule","forChild","canDeactivate","imports","declarations","exports","CustomerService","http","backend","basicAction","getAll","extractData","handleError","of","initializeCustomer","getById","createCustomer","updateCustomer","undefined","create","update","response","body","json","avatar","GenericValidator","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","touched","errors","messageKey","NumberValidators","min","max"],"mappings":"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","file":"default~customer-customer-module~order-order-module-es5.js","sourcesContent":["export { Observable } from 'rxjs';\n//# sourceMappingURL=Observable.js.map","import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName, MaxLengthValidator } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\n\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n\n@Component({\n    selector: 'customer-form',\n    templateUrl: './customer-form.component.html',\n    styles: [`\n    .title-spacer {\n        flex: 1 1 auto;\n      }\n    .form-field{\n        width: 100%;\n        margin-left: 20px;\n        margin-right: 20px;\n    }\n    .avatar-field {\n        left: 0;\n        margin: 0 auto;\n        position: absolute;\n        margin-left: 50px;\n    }\n    `]\n})\nexport class CustomerFormComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\n\n    pageTitle: string = 'Update Customer';\n    errorMessage: string;\n    customerForm: FormGroup;\n    customer: Customer = <Customer>{};\n    private sub: Subscription;\n    showImage: boolean;\n    imageWidth: number = 100;\n    imageMargin: number = 2;\n    fieldColspan = 3;\n\n    // Use with the generic validation message class\n    displayMessage: { [key: string]: string } = {};\n    private genericValidator: GenericValidator;\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    private validationMessages: { [key: string]: { [key: string]: string } | {} } = {\n        firstname: {\n            required: 'Customer first name is required.',\n            minlength: 'Customer first name must be at least one characters.',\n            maxlength: 'Customer first name cannot exceed 100 characters.'\n        },\n        lastname: {\n            required: 'Customer last name is required.',\n            minlength: 'Customer last name must be at least one characters.',\n            maxlength: 'Customer last name cannot exceed 100 characters.'\n        },\n        email: {\n            required: 'Customer email is required.',\n            minlength: 'Customer email must be at least one characters.',\n            maxlength: 'Customer email cannot exceed 200 characters.'\n        },\n        rewards: {\n            range: 'Rewards of the customer must be between 0 (lowest) and 150 (highest).'\n        },\n        phone: { maxlength: 'Customer phone cannot exceed 12 characters.' },\n        mobile: { maxlength: 'Customer mobile cannot exceed 12 characters.' },\n    };\n\n    constructor(private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private customerService: CustomerService,\n        private breakpointObserver: BreakpointObserver\n    ) {\n        breakpointObserver.observe([\n            Breakpoints.HandsetLandscape,\n            Breakpoints.HandsetPortrait\n        ]).subscribe(result => {\n            // console.log(result)\n            this.onScreensizeChange(result);\n        });\n        this.genericValidator = new GenericValidator(this.validationMessages);\n\n    }\n\n    ngOnInit(): void {\n        this.customerForm = this.fb.group({\n            firstname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            lastname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(200)]],\n            rewards: ['', NumberValidators.range(0, 150)],\n            phone: ['', Validators.maxLength(12)],\n            mobile: ['', Validators.maxLength(12)],\n            membership: false,\n        });\n\n        // Read the customer Id from the route parameter\n        this.sub = this.route.params.subscribe(\n            params => {\n                let id = +params['id'];\n                this.getCustomer(id);\n            }\n        );\n\n        this.sub.add(null);\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        // Watch for the blur event from any input element on the form.\n        const controlBlurs: Observable<any>[] = this.formInputElements\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\n\n        // Merge the blur event observable with the valueChanges observable\n        Observable.merge(this.customerForm.valueChanges, ...controlBlurs).debounceTime(500).subscribe(value => {\n            this.displayMessage = this.genericValidator.processMessages(this.customerForm);\n        });\n    }\n\n    getCustomer(id: number): void {\n        this.customerService.getCustomer(id)\n            .subscribe(\n                (customer: Customer) => this.onCustomerRetrieved(customer),\n                (error: any) => this.errorMessage = <any>error\n            );\n    }\n\n    onCustomerRetrieved(customer: Customer): void {\n        if (this.customerForm) {\n            this.customerForm.reset();\n        }\n        this.customer = customer;\n\n        if (this.customer.id === 0) {\n            this.pageTitle = 'New Customer';\n        } else {\n            this.pageTitle = `Customer: ${this.customer.firstname} ${this.customer.lastname}`;\n        }\n\n        // Update the data on the form\n        this.customerForm.patchValue({\n            firstname: this.customer.firstname,\n            lastname: this.customer.lastname,\n            email: this.customer.email,\n            rewards: this.customer.rewards,\n            phone: this.customer.phone,\n            mobile: this.customer.mobile,\n            membership: this.customer.membership\n        });\n    }\n\n    deleteCustomer(): void {\n        if (this.customer.id === 0) {\n            // Don't delete, it was never saved.\n            this.onSaveComplete();\n        } else {\n            if (confirm(`Really delete the customer: ${this.customer.firstname}?`)) {\n                this.customerService.deleteCustomer(this.customer.id)\n                    .subscribe(\n                        () => this.onSaveComplete(),\n                        (error: any) => this.errorMessage = <any>error\n                    );\n            }\n        }\n    }\n\n    toggleImage(): void {\n        event.preventDefault();\n        this.showImage = !this.showImage;\n    }\n\n\n    saveCustomer(): void {\n        if (this.customerForm.dirty && this.customerForm.valid) {\n            // Copy the form values over the customer object values\n            const customer = Object.assign({}, this.customer, this.customerForm.value);\n\n            this.customerService.saveCustomer(customer)\n                .subscribe(\n                    () => this.onSaveComplete(),\n                    (error: any) => this.errorMessage = <any>error\n                );\n        } else if (!this.customerForm.dirty) {\n            this.onSaveComplete();\n        }\n    }\n\n    onSaveComplete(): void {\n        // Reset the form to clear the flags\n        this.customerForm.reset();\n        this.router.navigate(['/customers']);\n    }\n\n    onScreensizeChange(result: any) {\n        // debugger\n        const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n        const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n        console.log(\n            ` isLess600  ${isLess600} \n            isLess1000 ${isLess1000}  `\n        )\n        if (isLess1000) {\n            if (isLess600) {\n                this.fieldColspan = 12;\n            }\n            else {\n                this.fieldColspan = 6;\n            }\n        }\n        else {\n            this.fieldColspan = 3;\n        }\n    }\n}\n","<form novalidate (ngSubmit)=\"saveCustomer()\" [formGroup]=\"customerForm\">\n  <mat-card>\n\n    <mat-toolbar style=\"background-color: #FFF\">\n      <mat-toolbar-row>\n        <span class=\"view-card-title\"> {{pageTitle}}</span>\n        <span class=\"title-spacer\"></span>\n        <mat-card-actions>\n          <button mat-mini-fab class=\"primary\" style=\"margin-right:10px; background-color:darkgray\" type=\"submit\"\n            [disabled]='!customerForm.valid'>\n            <mat-icon>save</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"\" style=\"margin-right:10px; \" [routerLink]=\"['/customers']\">\n            <mat-icon>cancel</mat-icon>\n          </button>\n\n        </mat-card-actions>\n\n      </mat-toolbar-row>\n    </mat-toolbar>\n\n    <mat-card-content style=\"margin: 5 0 5 10px;\">\n\n    \n      <mat-grid-list cols=\"12\" rowHeight=\"120px\">\n        <mat-grid-tile [colspan]=\"fieldColspan\">\n          <span class=\"view-label\"> \n            <img mat-card-avatar *ngIf='customer.avatar' class=\"center-block img-responsive\" [src]='customer.avatar'\n              [title]='customer.firstname | uppercase' [style.width.px]='imageWidth' [style.height.px]='imageWidth'  [style.margin.px]='imageMargin'>\n          </span>\n        </mat-grid-tile>\n      </mat-grid-list>\n      <div class=\"form-card\">\n        <mat-grid-list cols=\"12\" rowHeight=\"80px\">\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <!-- colspan=\"4\"> -->\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>First Name</mat-label>\n              <input matInput id=\"firstNameId\" type=\"text\" placeholder=\"First Name (required)\"\n                formControlName=\"firstname\" />\n              <mat-error *ngIf=\"displayMessage.firstname\">\n                {{displayMessage.firstname}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Last Name</mat-label>\n              <input matInput id=\"lastNameId\" type=\"text\" placeholder=\"Last Name (required)\"\n                formControlName=\"lastname\" />\n              <mat-error *ngIf=\"displayMessage.lastname\">\n                {{displayMessage.lastname}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Email</mat-label>\n              <input matInput id=\"email\" type=\"email\" placeholder=\"Email \" formControlName=\"email\" />\n              <mat-error *ngIf=\"displayMessage.email\">\n                {{displayMessage.email}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Phone</mat-label>\n              <input matInput id=\"phone\" type=\"text\" placeholder=\"Phone\" formControlName=\"phone\" />\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Mobile</mat-label>\n              <input matInput id=\"mobile\" type=\"text\" placeholder=\"Mobile \" formControlName=\"mobile\" />\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Rewards\" id=\"ageId\" type=\"number\" formControlName=\"rewards\" />\n            </mat-form-field>\n          </mat-grid-tile>\n            <mat-grid-tile [colspan]=\"fieldColspan\">\n              <!-- <mat-form-field class=\"form-field\" > -->\n                <!-- <mat-label>Membership</mat-label> -->\n                <mat-slide-toggle id=\"membership\" formControlName=\"membership\">Membership</mat-slide-toggle>\n                <!-- </mat-form-field> -->\n          </mat-grid-tile>\n       \n\n        </mat-grid-list>\n\n      </div>\n\n\n    </mat-card-content>\n\n  </mat-card>\n</form>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, CanDeactivate } from '@angular/router';\n\nimport { CustomerFormComponent } from './customer-form.component';\n\n@Injectable()\nexport  class CustomerDetailGuard implements CanActivate {\n\n    constructor(private router: Router) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot): boolean {\n        let id = +route.url[1].path;\n        if (isNaN(id) || id < 1) {\n            alert('Invalid customer Id');\n            // start a new navigation to redirect to list page\n            this.router.navigate(['/customers']);\n            // abort current navigation\n            return false;\n        };\n        return true;\n    }\n}\n\n@Injectable()\nexport  class CustomerEditGuard implements CanDeactivate<CustomerFormComponent> {\n\n    canDeactivate(component: CustomerFormComponent): boolean {\n        if (component.customerForm.dirty) {\n            let customerName = component.customerForm.get('firstname').value || 'New Customer';\n            return confirm(`Navigate away and lose all changes to ${customerName}?`);\n        }\n        return true;\n    }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\nimport { PagerService } from '../_services';\nimport { ConfirmDialog } from '../shared';\nimport * as _ from 'lodash';\n\nimport {MatDialog} from '@angular/material/dialog'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTableDataSource } from '@angular/material/table';\n\n\n@Component({\n    selector: 'customer-list',\n    templateUrl: './customer-list.component.html',\n    styleUrls: ['./customer-list.component.css'],\n    providers: [ConfirmDialog]\n})\nexport class CustomerListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n\n    pageTitle: string = 'Customers';\n    imageWidth: number = 30;\n    imageMargin: number = 2;\n    showImage: boolean = false;\n    listFilter: any = {};\n    errorMessage: string;\n\n    customers: Customer[];\n    customerList: Customer[]; //\n    displayedColumns = [\"avatar\", \"firstname\", \"lastname\", \"rewards\", \"email\", \"membership\", \"id\"];\n    dataSource: any = null;\n    pager: any = {};\n    pagedItems: any[];\n    searchFilter: any = {\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\"\n    };\n    selectedOption: string;\n\n\n    constructor(\n        private customerService: CustomerService,\n        // private pagerService: PagerService,\n        public dialog: MatDialog,\n        public snackBar: MatSnackBar) {\n    }\n\n    applyFilter(filterValue: string) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n    }\n\n    freshDataList(customers: Customer[]) {\n        this.customers = customers;\n\n        this.dataSource = new MatTableDataSource(this.customers);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    }\n\n    ngOnInit(): void {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.freshDataList(customers);\n            },\n            error => this.errorMessage = <any>error);\n\n        this.searchFilter = {};\n        this.listFilter = {};\n    }\n\n    getCustomers(pageNum?: number) {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.freshDataList(customers);\n            },\n            error => this.errorMessage = <any>error);\n    }\n\n    searchCustomers(filters: any) {\n        if (filters) {\n            this.customerService.getCustomers()\n                .subscribe(customers => {\n                    this.customers = customers;\n                    console.log(this.customers.length)\n                    this.customers = this.customers.filter((customer: Customer) => {\n                        let match = true;\n\n                        Object.keys(filters).forEach((k) => {\n                            match = match && filters[k] ?\n                                customer[k].toLocaleLowerCase().indexOf(filters[k].toLocaleLowerCase()) > -1 : match;\n                        })\n                        return match;\n                    });\n                    this.freshDataList(customers);\n                },\n                error => this.errorMessage = <any>error);\n        }\n\n    }\n\n    resetListFilter() {\n        this.listFilter = {};\n        this.getCustomers();\n    }\n\n    reset() {\n        this.listFilter = {};\n        this.searchFilter = {};\n        this.getCustomers();\n\n    }\n\n    resetSearchFilter(searchPanel: any) {\n        searchPanel.toggle();\n        this.searchFilter = {};\n        this.getCustomers();\n    }\n\n    openSnackBar(message: string, action: string) {\n        this.snackBar.open(message, action, {\n            duration: 1500,\n        });\n    }\n\n    openDialog(id: number) {\n        let dialogRef = this.dialog.open(ConfirmDialog,\n            { data: { title: 'Dialog', message: 'Are you sure to delete this item?' } });\n        dialogRef.disableClose = true;\n\n\n        dialogRef.afterClosed().subscribe(result => {\n            this.selectedOption = result;\n\n            if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n                this.customerService.deleteCustomer(id).subscribe(\n                    () => {\n                        this.customerService.getCustomers()\n                            .subscribe(customers => {\n                                this.freshDataList(customers);\n                            },\n                            error => this.errorMessage = <any>error);\n                        this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n                    },\n                    (error: any) => {\n                        this.errorMessage = <any>error;\n                        console.log(this.errorMessage);\n                        this.openSnackBar(\"This item has not been deleted successfully. Please try again.\", \"Close\");\n                    }\n                );\n            }\n        });\n    }\n\n\n\n}\n","<!-- <mat-sidenav-container> -->\n<mat-card class='light' style=\"height: 100%;\">\n\n  <mat-card-header>\n    <mat-card-title class=\"view-card-title\">\n      <h1>{{pageTitle }}</h1>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-toolbar class=\"primary\">\n    <mat-toolbar-row>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#e07c9e\" [routerLink]=\"['/customers/edit/', 0]\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#a28b6e\" (click)=\"sidenav.toggle()\">\n        <mat-icon>search</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:darkgray\" (click)=\"reset()\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n\n      <span class=\"title-spacer\"></span>\n      <mat-form-field appearance=\"standard\" class=\"search-form-fileld\">\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"applyFilter($event.target.value)\">\n        <mat-icon>filter_list</mat-icon>\n      </mat-form-field>\n\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"avatar\">\n      <mat-header-cell *matHeaderCellDef></mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\">\n        <!-- <a [routerLink]=\"['/customer', customer.id]\"> -->\n        <img *ngIf='customer.avatar' [src]='customer.avatar' [title]='customer.firstname | uppercase'\n          [style.width.px]='imageWidth' [style.margin.px]='imageMargin'>\n        <!-- </a> -->\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"firstname\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> First Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.firstname}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"lastname\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Last Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.lastname}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"email\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Email </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.email}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"rewards\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Rewards </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.rewards | number }} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"membership\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Membershiop</mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\">\n        <span *ngIf=\"!customer.membership\" style=\"color:green\">\n          <mat-icon>check_circle</mat-icon>\n        </span>\n        <span *ngIf=\"customer.membership\" style=\"color:darkgrey\">\n          <mat-icon>highlight_off</mat-icon>\n        </span>\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef style=\"justify-content:right;\">\n        <!-- <button mat-button style=\"color:white; background-color:darkgrey\" (click)=\"resetListFilter()\">Reset</button> -->\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\" style=\"justify-content:right;\">\n        <button mat-mini-fab style=\"background-color:teal; min-height: 30px;   margin: 5px;\"\n          [routerLink]=\"['/customers/edit/', customer.id]\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-mini-fab style=\"background-color:lightblue; min-height: 30px;  margin: 5px;\"\n          (click)=\"openDialog(customer.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n  </mat-table>\n  <mat-paginator #paginator [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10]\">\n  </mat-paginator>\n</mat-card>\n\n<mat-sidenav class=\"search-panel\" position=\"end\" dark #sidenav mode=\"push\" opened=\"false\">\n  <mat-card class=\"profile-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"avatar\">\n        <mat-icon>search</mat-icon>\n      </div>\n      <mat-card-title>\n        Advanced Search\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n  <mat-nav-list style=\"margin-left:50px;\">\n    <mat-form-field appearance=\"standard\">\n      <mat-label>First Name</mat-label>\n      <input matInput appearance=\"standard\" placeholder=\"First Name\" name=\"firstname\"\n        [(ngModel)]=\"searchFilter.firstname\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"standard\">\n      <mat-label>Last Name</mat-label>\n      <input matInput placeholder=\"Last Name\" name=\"reference\" [(ngModel)]=\"searchFilter.customerDate\" #reference />\n    </mat-form-field>\n    <mat-form-field appearance=\"standard\">\n      <mat-label>Mobile</mat-label>\n      <input matInput appearance=\"standard\" placeholder=\"Mobile\" name=\"amount\" [(ngModel)]=\"searchFilter.customerName\"\n        #amount />\n    </mat-form-field>\n\n  </mat-nav-list>\n  <mat-divider></mat-divider>\n  <mat-card-header>\n    <mat-action-list>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkgreen; margin:5px;\"\n        (click)=\"searchCustomers(searchFilter);sidenav.toggle()\">\n        <mat-icon>search</mat-icon>Search\n      </button>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkred;margin:5px;\"\n        (click)=\"resetSearchFilter(sidenav)\">\n        <mat-icon>refresh</mat-icon>Reset\n      </button>\n    </mat-action-list>\n  </mat-card-header>\n</mat-sidenav>\n<!-- </mat-sidenav-container> -->\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { CustomerListComponent } from \"./customer-list.component\";\nimport {\n  CustomerDetailGuard,\n  CustomerEditGuard\n} from \"./customer-guard.service\";\nimport { CustomerFormComponent } from \"./customer-form.component\";\n\nimport { CustomerService } from \"./customer.service\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { MaterialModule } from \"../shared/material.module\";\n\n\n@NgModule({\n  imports: [\n    SharedModule,\n    // ReactiveFormsModule,\n    MaterialModule,\n    RouterModule.forChild([\n      { path: \"\", component: CustomerListComponent },\n      {\n        path: \"new/\",\n        canDeactivate: [CustomerEditGuard],\n        component: CustomerFormComponent\n      },\n      {\n        path: \"edit/:id\",\n        canDeactivate: [CustomerEditGuard],\n        component: CustomerFormComponent\n      }\n    ])\n  ],\n  declarations: [\n    /**\n     * Components / Directives/ Pipes\n     */\n    CustomerListComponent,\n    CustomerFormComponent\n  ],\n  providers: [CustomerService, CustomerDetailGuard, CustomerEditGuard,\n  ],\n  // entryComponents: [MatOption],\n  exports: [\n    CustomerListComponent,\n    CustomerFormComponent,\n\n  ]\n})\nexport class CustomerModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\n\nimport { Customer } from './customer';\n\n@Injectable()\nexport class CustomerService {\n  private basicAction = 'customers/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getCustomers(): Observable<Customer[]> {\n    return this.backend.getAll(this.basicAction)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getCustomer(id: number): Observable<Customer> {\n    if (id === 0) {\n      return Observable.of(this.initializeCustomer());\n    };\n    const action = `${this.basicAction}${id}`;\n    return this.backend.getById(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  deleteCustomer(id: number): Observable<Response> {\n\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveCustomer(customer: Customer): Observable<Customer> {\n\n\n    if (customer.id === 0) {\n      return this.createCustomer(customer);\n    }\n    return this.updateCustomer(customer);\n  }\n\n  private createCustomer(customer: Customer): Observable<Customer> {\n    customer.id = undefined;\n    return this.backend.create(this.basicAction, customer)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateCustomer(customer: Customer): Observable<Customer> {\n    const action = `${this.basicAction}${customer.id}`;\n    return this.backend.update(action, customer)\n      .map(() => customer)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    let body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeCustomer(): Customer {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      firstname: null,\n      lastname: null,\n      rewards: 0,\n      email: null,\n      membership: false,\n      mobile: null,\n      phone:null\n    };\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n\n    // Provide the set of valid validation messages\n    // Stucture:\n    // controlName1: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // },\n    // controlName2: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // }\n    constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\n\n    }\n\n    // Processes each control within a FormGroup\n    // And returns a set of validation messages to display\n    // Structure\n    // controlName1: 'Validation Message.',\n    processMessages(container: FormGroup): { [key: string]: string } {\n        let messages = {};\n        for (let controlKey in container.controls) {\n            if (container.controls.hasOwnProperty(controlKey)) {\n                let c = container.controls[controlKey];\n                // If it is a FormGroup, process its child controls.\n                if (c instanceof FormGroup) {\n                    let childMessages = this.processMessages(c);\n                    Object.assign(messages, childMessages);\n                } else {\n                    // Only validate if there are validation messages for the control\n                    if (this.validationMessages[controlKey]) {\n                        messages[controlKey] = '';\n                        if ((c.dirty || c.touched) && c.errors) {\n                            Object.keys(c.errors).map(messageKey => {\n                                if (this.validationMessages[controlKey][messageKey]) {\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return messages;\n    }\n}\n","export * from \"./number.validator\";\nexport * from \"./generic-validator\";\nexport * from \"./dialog.component\";\nexport * from \"./material.module\";\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class NumberValidators {\n\n    static range(min: number, max: number): ValidatorFn {\n        return (c: AbstractControl): { [key: string]: boolean } | null => {\n            if (c.value && (isNaN(c.value) || c.value < min || c.value > max)) {\n                return { 'range': true };\n            }\n            return null;\n        };\n    }\n}\n"]}