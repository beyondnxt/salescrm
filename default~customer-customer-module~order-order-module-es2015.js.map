{"version":3,"sources":["./node_modules/rxjs-compat/_esm2015/Observable.js","./src/app/customer/customer-form.component.ts","./src/app/customer/customer-form.component.html","./src/app/customer/customer-guard.service.ts","./src/app/customer/customer-list.component.ts","./src/app/customer/customer-list.component.html","./src/app/customer/customer.module.ts","./src/app/customer/customer.service.ts","./src/app/shared/generic-validator.ts","./src/app/shared/index.ts","./src/app/shared/number.validator.ts"],"names":[],"mappings":"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","file":"default~customer-customer-module~order-order-module-es2015.js","sourcesContent":["export { Observable } from 'rxjs';\n//# sourceMappingURL=Observable.js.map","import { Component, OnInit, AfterViewInit, OnDestroy, ViewChildren, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators, FormControlName, MaxLengthValidator } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/merge';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\n\nimport { NumberValidators } from '../shared/number.validator';\nimport { GenericValidator } from '../shared/generic-validator';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\n\n\n@Component({\n    selector: 'customer-form',\n    templateUrl: './customer-form.component.html',\n    styles: [`\n    .title-spacer {\n        flex: 1 1 auto;\n      }\n    .form-field{\n        width: 100%;\n        margin-left: 20px;\n        margin-right: 20px;\n    }\n    .avatar-field {\n        left: 0;\n        margin: 0 auto;\n        position: absolute;\n        margin-left: 50px;\n    }\n    `]\n})\nexport class CustomerFormComponent implements OnInit, AfterViewInit, OnDestroy {\n    @ViewChildren(FormControlName, { read: ElementRef }) formInputElements: ElementRef[];\n\n    pageTitle: string = 'Update Customer';\n    errorMessage: string;\n    customerForm: FormGroup;\n    customer: Customer = <Customer>{};\n    private sub: Subscription;\n    showImage: boolean;\n    imageWidth: number = 100;\n    imageMargin: number = 2;\n    fieldColspan = 3;\n\n    // Use with the generic validation message class\n    displayMessage: { [key: string]: string } = {};\n    private genericValidator: GenericValidator;\n\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    private validationMessages: { [key: string]: { [key: string]: string } | {} } = {\n        firstname: {\n            required: 'Customer first name is required.',\n            minlength: 'Customer first name must be at least one characters.',\n            maxlength: 'Customer first name cannot exceed 100 characters.'\n        },\n        lastname: {\n            required: 'Customer last name is required.',\n            minlength: 'Customer last name must be at least one characters.',\n            maxlength: 'Customer last name cannot exceed 100 characters.'\n        },\n        email: {\n            required: 'Customer email is required.',\n            minlength: 'Customer email must be at least one characters.',\n            maxlength: 'Customer email cannot exceed 200 characters.'\n        },\n        rewards: {\n            range: 'Rewards of the customer must be between 0 (lowest) and 150 (highest).'\n        },\n        phone: { maxlength: 'Customer phone cannot exceed 12 characters.' },\n        mobile: { maxlength: 'Customer mobile cannot exceed 12 characters.' },\n    };\n\n    constructor(private fb: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private customerService: CustomerService,\n        private breakpointObserver: BreakpointObserver\n    ) {\n        breakpointObserver.observe([\n            Breakpoints.HandsetLandscape,\n            Breakpoints.HandsetPortrait\n        ]).subscribe(result => {\n            // console.log(result)\n            this.onScreensizeChange(result);\n        });\n        this.genericValidator = new GenericValidator(this.validationMessages);\n\n    }\n\n    ngOnInit(): void {\n        this.customerForm = this.fb.group({\n            firstname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            lastname: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\n            email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(200)]],\n            rewards: ['', NumberValidators.range(0, 150)],\n            phone: ['', Validators.maxLength(12)],\n            mobile: ['', Validators.maxLength(12)],\n            membership: false,\n        });\n\n        // Read the customer Id from the route parameter\n        this.sub = this.route.params.subscribe(\n            params => {\n                let id = +params['id'];\n                this.getCustomer(id);\n            }\n        );\n\n        this.sub.add(null);\n    }\n\n    ngOnDestroy(): void {\n        this.sub.unsubscribe();\n    }\n\n    ngAfterViewInit(): void {\n        // Watch for the blur event from any input element on the form.\n        const controlBlurs: Observable<any>[] = this.formInputElements\n            .map((formControl: ElementRef) => Observable.fromEvent(formControl.nativeElement, 'blur'));\n\n        // Merge the blur event observable with the valueChanges observable\n        Observable.merge(this.customerForm.valueChanges, ...controlBlurs).debounceTime(500).subscribe(value => {\n            this.displayMessage = this.genericValidator.processMessages(this.customerForm);\n        });\n    }\n\n    getCustomer(id: number): void {\n        this.customerService.getCustomer(id)\n            .subscribe(\n                (customer: Customer) => this.onCustomerRetrieved(customer),\n                (error: any) => this.errorMessage = <any>error\n            );\n    }\n\n    onCustomerRetrieved(customer: Customer): void {\n        if (this.customerForm) {\n            this.customerForm.reset();\n        }\n        this.customer = customer;\n\n        if (this.customer.id === 0) {\n            this.pageTitle = 'New Customer';\n        } else {\n            this.pageTitle = `Customer: ${this.customer.firstname} ${this.customer.lastname}`;\n        }\n\n        // Update the data on the form\n        this.customerForm.patchValue({\n            firstname: this.customer.firstname,\n            lastname: this.customer.lastname,\n            email: this.customer.email,\n            rewards: this.customer.rewards,\n            phone: this.customer.phone,\n            mobile: this.customer.mobile,\n            membership: this.customer.membership\n        });\n    }\n\n    deleteCustomer(): void {\n        if (this.customer.id === 0) {\n            // Don't delete, it was never saved.\n            this.onSaveComplete();\n        } else {\n            if (confirm(`Really delete the customer: ${this.customer.firstname}?`)) {\n                this.customerService.deleteCustomer(this.customer.id)\n                    .subscribe(\n                        () => this.onSaveComplete(),\n                        (error: any) => this.errorMessage = <any>error\n                    );\n            }\n        }\n    }\n\n    toggleImage(): void {\n        event.preventDefault();\n        this.showImage = !this.showImage;\n    }\n\n\n    saveCustomer(): void {\n        if (this.customerForm.dirty && this.customerForm.valid) {\n            // Copy the form values over the customer object values\n            const customer = Object.assign({}, this.customer, this.customerForm.value);\n\n            this.customerService.saveCustomer(customer)\n                .subscribe(\n                    () => this.onSaveComplete(),\n                    (error: any) => this.errorMessage = <any>error\n                );\n        } else if (!this.customerForm.dirty) {\n            this.onSaveComplete();\n        }\n    }\n\n    onSaveComplete(): void {\n        // Reset the form to clear the flags\n        this.customerForm.reset();\n        this.router.navigate(['/customers']);\n    }\n\n    onScreensizeChange(result: any) {\n        // debugger\n        const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n        const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n        console.log(\n            ` isLess600  ${isLess600} \n            isLess1000 ${isLess1000}  `\n        )\n        if (isLess1000) {\n            if (isLess600) {\n                this.fieldColspan = 12;\n            }\n            else {\n                this.fieldColspan = 6;\n            }\n        }\n        else {\n            this.fieldColspan = 3;\n        }\n    }\n}\n","<form novalidate (ngSubmit)=\"saveCustomer()\" [formGroup]=\"customerForm\">\n  <mat-card>\n\n    <mat-toolbar style=\"background-color: #FFF\">\n      <mat-toolbar-row>\n        <span class=\"view-card-title\"> {{pageTitle}}</span>\n        <span class=\"title-spacer\"></span>\n        <mat-card-actions>\n          <button mat-mini-fab class=\"primary\" style=\"margin-right:10px; background-color:darkgray\" type=\"submit\"\n            [disabled]='!customerForm.valid'>\n            <mat-icon>save</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"\" style=\"margin-right:10px; \" [routerLink]=\"['/customers']\">\n            <mat-icon>cancel</mat-icon>\n          </button>\n\n        </mat-card-actions>\n\n      </mat-toolbar-row>\n    </mat-toolbar>\n\n    <mat-card-content style=\"margin: 5 0 5 10px;\">\n\n    \n      <mat-grid-list cols=\"12\" rowHeight=\"120px\">\n        <mat-grid-tile [colspan]=\"fieldColspan\">\n          <span class=\"view-label\"> \n            <img mat-card-avatar *ngIf='customer.avatar' class=\"center-block img-responsive\" [src]='customer.avatar'\n              [title]='customer.firstname | uppercase' [style.width.px]='imageWidth' [style.height.px]='imageWidth'  [style.margin.px]='imageMargin'>\n          </span>\n        </mat-grid-tile>\n      </mat-grid-list>\n      <div class=\"form-card\">\n        <mat-grid-list cols=\"12\" rowHeight=\"80px\">\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <!-- colspan=\"4\"> -->\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>First Name</mat-label>\n              <input matInput id=\"firstNameId\" type=\"text\" placeholder=\"First Name (required)\"\n                formControlName=\"firstname\" />\n              <mat-error *ngIf=\"displayMessage.firstname\">\n                {{displayMessage.firstname}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Last Name</mat-label>\n              <input matInput id=\"lastNameId\" type=\"text\" placeholder=\"Last Name (required)\"\n                formControlName=\"lastname\" />\n              <mat-error *ngIf=\"displayMessage.lastname\">\n                {{displayMessage.lastname}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Email</mat-label>\n              <input matInput id=\"email\" type=\"email\" placeholder=\"Email \" formControlName=\"email\" />\n              <mat-error *ngIf=\"displayMessage.email\">\n                {{displayMessage.email}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Phone</mat-label>\n              <input matInput id=\"phone\" type=\"text\" placeholder=\"Phone\" formControlName=\"phone\" />\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-label>Mobile</mat-label>\n              <input matInput id=\"mobile\" type=\"text\" placeholder=\"Mobile \" formControlName=\"mobile\" />\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput placeholder=\"Rewards\" id=\"ageId\" type=\"number\" formControlName=\"rewards\" />\n            </mat-form-field>\n          </mat-grid-tile>\n            <mat-grid-tile [colspan]=\"fieldColspan\">\n              <!-- <mat-form-field class=\"form-field\" > -->\n                <!-- <mat-label>Membership</mat-label> -->\n                <mat-slide-toggle id=\"membership\" formControlName=\"membership\">Membership</mat-slide-toggle>\n                <!-- </mat-form-field> -->\n          </mat-grid-tile>\n       \n\n        </mat-grid-list>\n\n      </div>\n\n\n    </mat-card-content>\n\n  </mat-card>\n</form>\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, CanDeactivate } from '@angular/router';\n\nimport { CustomerFormComponent } from './customer-form.component';\n\n@Injectable()\nexport  class CustomerDetailGuard implements CanActivate {\n\n    constructor(private router: Router) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot): boolean {\n        let id = +route.url[1].path;\n        if (isNaN(id) || id < 1) {\n            alert('Invalid customer Id');\n            // start a new navigation to redirect to list page\n            this.router.navigate(['/customers']);\n            // abort current navigation\n            return false;\n        };\n        return true;\n    }\n}\n\n@Injectable()\nexport  class CustomerEditGuard implements CanDeactivate<CustomerFormComponent> {\n\n    canDeactivate(component: CustomerFormComponent): boolean {\n        if (component.customerForm.dirty) {\n            let customerName = component.customerForm.get('firstname').value || 'New Customer';\n            return confirm(`Navigate away and lose all changes to ${customerName}?`);\n        }\n        return true;\n    }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { Customer } from './customer';\nimport { CustomerService } from './customer.service';\nimport { PagerService } from '../_services';\nimport { ConfirmDialog } from '../shared';\nimport * as _ from 'lodash';\n\nimport {MatDialog} from '@angular/material/dialog'\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTableDataSource } from '@angular/material/table';\n\n\n@Component({\n    selector: 'customer-list',\n    templateUrl: './customer-list.component.html',\n    styleUrls: ['./customer-list.component.css'],\n    providers: [ConfirmDialog]\n})\nexport class CustomerListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n\n    pageTitle: string = 'Customers';\n    imageWidth: number = 30;\n    imageMargin: number = 2;\n    showImage: boolean = false;\n    listFilter: any = {};\n    errorMessage: string;\n\n    customers: Customer[];\n    customerList: Customer[]; //\n    displayedColumns = [\"avatar\", \"firstname\", \"lastname\", \"rewards\", \"email\", \"membership\", \"id\"];\n    dataSource: any = null;\n    pager: any = {};\n    pagedItems: any[];\n    searchFilter: any = {\n        firstname: \"\",\n        lastname: \"\",\n        email: \"\"\n    };\n    selectedOption: string;\n\n\n    constructor(\n        private customerService: CustomerService,\n        // private pagerService: PagerService,\n        public dialog: MatDialog,\n        public snackBar: MatSnackBar) {\n    }\n\n    applyFilter(filterValue: string) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n    }\n\n    freshDataList(customers: Customer[]) {\n        this.customers = customers;\n\n        this.dataSource = new MatTableDataSource(this.customers);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    }\n\n    ngOnInit(): void {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.freshDataList(customers);\n            },\n            error => this.errorMessage = <any>error);\n\n        this.searchFilter = {};\n        this.listFilter = {};\n    }\n\n    getCustomers(pageNum?: number) {\n        this.customerService.getCustomers()\n            .subscribe(customers => {\n                this.freshDataList(customers);\n            },\n            error => this.errorMessage = <any>error);\n    }\n\n    searchCustomers(filters: any) {\n        if (filters) {\n            this.customerService.getCustomers()\n                .subscribe(customers => {\n                    this.customers = customers;\n                    console.log(this.customers.length)\n                    this.customers = this.customers.filter((customer: Customer) => {\n                        let match = true;\n\n                        Object.keys(filters).forEach((k) => {\n                            match = match && filters[k] ?\n                                customer[k].toLocaleLowerCase().indexOf(filters[k].toLocaleLowerCase()) > -1 : match;\n                        })\n                        return match;\n                    });\n                    this.freshDataList(customers);\n                },\n                error => this.errorMessage = <any>error);\n        }\n\n    }\n\n    resetListFilter() {\n        this.listFilter = {};\n        this.getCustomers();\n    }\n\n    reset() {\n        this.listFilter = {};\n        this.searchFilter = {};\n        this.getCustomers();\n\n    }\n\n    resetSearchFilter(searchPanel: any) {\n        searchPanel.toggle();\n        this.searchFilter = {};\n        this.getCustomers();\n    }\n\n    openSnackBar(message: string, action: string) {\n        this.snackBar.open(message, action, {\n            duration: 1500,\n        });\n    }\n\n    openDialog(id: number) {\n        let dialogRef = this.dialog.open(ConfirmDialog,\n            { data: { title: 'Dialog', message: 'Are you sure to delete this item?' } });\n        dialogRef.disableClose = true;\n\n\n        dialogRef.afterClosed().subscribe(result => {\n            this.selectedOption = result;\n\n            if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n                this.customerService.deleteCustomer(id).subscribe(\n                    () => {\n                        this.customerService.getCustomers()\n                            .subscribe(customers => {\n                                this.freshDataList(customers);\n                            },\n                            error => this.errorMessage = <any>error);\n                        this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n                    },\n                    (error: any) => {\n                        this.errorMessage = <any>error;\n                        console.log(this.errorMessage);\n                        this.openSnackBar(\"This item has not been deleted successfully. Please try again.\", \"Close\");\n                    }\n                );\n            }\n        });\n    }\n\n\n\n}\n","<!-- <mat-sidenav-container> -->\n<mat-card class='light' style=\"height: 100%;\">\n\n  <mat-card-header>\n    <mat-card-title class=\"view-card-title\">\n      <h1>{{pageTitle }}</h1>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-toolbar class=\"primary\">\n    <mat-toolbar-row>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#e07c9e\" [routerLink]=\"['/customers/edit/', 0]\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#a28b6e\" (click)=\"sidenav.toggle()\">\n        <mat-icon>search</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:darkgray\" (click)=\"reset()\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n\n      <span class=\"title-spacer\"></span>\n      <mat-form-field appearance=\"standard\" class=\"search-form-fileld\">\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"applyFilter($event.target.value)\">\n        <mat-icon>filter_list</mat-icon>\n      </mat-form-field>\n\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"avatar\">\n      <mat-header-cell *matHeaderCellDef></mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\">\n        <!-- <a [routerLink]=\"['/customer', customer.id]\"> -->\n        <img *ngIf='customer.avatar' [src]='customer.avatar' [title]='customer.firstname | uppercase'\n          [style.width.px]='imageWidth' [style.margin.px]='imageMargin'>\n        <!-- </a> -->\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"firstname\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> First Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.firstname}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"lastname\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Last Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.lastname}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"email\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Email </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.email}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"rewards\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Rewards </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\"> {{customer.rewards | number }} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"membership\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header>Membershiop</mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\">\n        <span *ngIf=\"!customer.membership\" style=\"color:green\">\n          <mat-icon>check_circle</mat-icon>\n        </span>\n        <span *ngIf=\"customer.membership\" style=\"color:darkgrey\">\n          <mat-icon>highlight_off</mat-icon>\n        </span>\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef style=\"justify-content:right;\">\n        <!-- <button mat-button style=\"color:white; background-color:darkgrey\" (click)=\"resetListFilter()\">Reset</button> -->\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let customer\" style=\"justify-content:right;\">\n        <button mat-mini-fab style=\"background-color:teal; min-height: 30px;   margin: 5px;\"\n          [routerLink]=\"['/customers/edit/', customer.id]\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-mini-fab style=\"background-color:lightblue; min-height: 30px;  margin: 5px;\"\n          (click)=\"openDialog(customer.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n  </mat-table>\n  <mat-paginator #paginator [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10]\">\n  </mat-paginator>\n</mat-card>\n\n<mat-sidenav class=\"search-panel\" position=\"end\" dark #sidenav mode=\"push\" opened=\"false\">\n  <mat-card class=\"profile-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"avatar\">\n        <mat-icon>search</mat-icon>\n      </div>\n      <mat-card-title>\n        Advanced Search\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n  <mat-nav-list style=\"margin-left:50px;\">\n    <mat-form-field appearance=\"standard\">\n      <mat-label>First Name</mat-label>\n      <input matInput appearance=\"standard\" placeholder=\"First Name\" name=\"firstname\"\n        [(ngModel)]=\"searchFilter.firstname\" />\n    </mat-form-field>\n    <mat-form-field appearance=\"standard\">\n      <mat-label>Last Name</mat-label>\n      <input matInput placeholder=\"Last Name\" name=\"reference\" [(ngModel)]=\"searchFilter.customerDate\" #reference />\n    </mat-form-field>\n    <mat-form-field appearance=\"standard\">\n      <mat-label>Mobile</mat-label>\n      <input matInput appearance=\"standard\" placeholder=\"Mobile\" name=\"amount\" [(ngModel)]=\"searchFilter.customerName\"\n        #amount />\n    </mat-form-field>\n\n  </mat-nav-list>\n  <mat-divider></mat-divider>\n  <mat-card-header>\n    <mat-action-list>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkgreen; margin:5px;\"\n        (click)=\"searchCustomers(searchFilter);sidenav.toggle()\">\n        <mat-icon>search</mat-icon>Search\n      </button>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkred;margin:5px;\"\n        (click)=\"resetSearchFilter(sidenav)\">\n        <mat-icon>refresh</mat-icon>Reset\n      </button>\n    </mat-action-list>\n  </mat-card-header>\n</mat-sidenav>\n<!-- </mat-sidenav-container> -->\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { CustomerListComponent } from \"./customer-list.component\";\nimport {\n  CustomerDetailGuard,\n  CustomerEditGuard\n} from \"./customer-guard.service\";\nimport { CustomerFormComponent } from \"./customer-form.component\";\n\nimport { CustomerService } from \"./customer.service\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { MaterialModule } from \"../shared/material.module\";\n\n\n@NgModule({\n  imports: [\n    SharedModule,\n    // ReactiveFormsModule,\n    MaterialModule,\n    RouterModule.forChild([\n      { path: \"\", component: CustomerListComponent },\n      {\n        path: \"new/\",\n        canDeactivate: [CustomerEditGuard],\n        component: CustomerFormComponent\n      },\n      {\n        path: \"edit/:id\",\n        canDeactivate: [CustomerEditGuard],\n        component: CustomerFormComponent\n      }\n    ])\n  ],\n  declarations: [\n    /**\n     * Components / Directives/ Pipes\n     */\n    CustomerListComponent,\n    CustomerFormComponent\n  ],\n  providers: [CustomerService, CustomerDetailGuard, CustomerEditGuard,\n  ],\n  // entryComponents: [MatOption],\n  exports: [\n    CustomerListComponent,\n    CustomerFormComponent,\n\n  ]\n})\nexport class CustomerModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\n\nimport { Customer } from './customer';\n\n@Injectable()\nexport class CustomerService {\n  private basicAction = 'customers/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getCustomers(): Observable<Customer[]> {\n    return this.backend.getAll(this.basicAction)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getCustomer(id: number): Observable<Customer> {\n    if (id === 0) {\n      return Observable.of(this.initializeCustomer());\n    };\n    const action = `${this.basicAction}${id}`;\n    return this.backend.getById(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  deleteCustomer(id: number): Observable<Response> {\n\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveCustomer(customer: Customer): Observable<Customer> {\n\n\n    if (customer.id === 0) {\n      return this.createCustomer(customer);\n    }\n    return this.updateCustomer(customer);\n  }\n\n  private createCustomer(customer: Customer): Observable<Customer> {\n    customer.id = undefined;\n    return this.backend.create(this.basicAction, customer)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateCustomer(customer: Customer): Observable<Customer> {\n    const action = `${this.basicAction}${customer.id}`;\n    return this.backend.update(action, customer)\n      .map(() => customer)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    let body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeCustomer(): Customer {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      firstname: null,\n      lastname: null,\n      rewards: 0,\n      email: null,\n      membership: false,\n      mobile: null,\n      phone:null\n    };\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n\n    // Provide the set of valid validation messages\n    // Stucture:\n    // controlName1: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // },\n    // controlName2: {\n    //     validationRuleName1: 'Validation Message.',\n    //     validationRuleName2: 'Validation Message.'\n    // }\n    constructor(private validationMessages: { [key: string]: { [key: string]: string } }) {\n\n    }\n\n    // Processes each control within a FormGroup\n    // And returns a set of validation messages to display\n    // Structure\n    // controlName1: 'Validation Message.',\n    processMessages(container: FormGroup): { [key: string]: string } {\n        let messages = {};\n        for (let controlKey in container.controls) {\n            if (container.controls.hasOwnProperty(controlKey)) {\n                let c = container.controls[controlKey];\n                // If it is a FormGroup, process its child controls.\n                if (c instanceof FormGroup) {\n                    let childMessages = this.processMessages(c);\n                    Object.assign(messages, childMessages);\n                } else {\n                    // Only validate if there are validation messages for the control\n                    if (this.validationMessages[controlKey]) {\n                        messages[controlKey] = '';\n                        if ((c.dirty || c.touched) && c.errors) {\n                            Object.keys(c.errors).map(messageKey => {\n                                if (this.validationMessages[controlKey][messageKey]) {\n                                    messages[controlKey] += this.validationMessages[controlKey][messageKey] + ' ';\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return messages;\n    }\n}\n","export * from \"./number.validator\";\nexport * from \"./generic-validator\";\nexport * from \"./dialog.component\";\nexport * from \"./material.module\";\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class NumberValidators {\n\n    static range(min: number, max: number): ValidatorFn {\n        return (c: AbstractControl): { [key: string]: boolean } | null => {\n            if (c.value && (isNaN(c.value) || c.value < min || c.value > max)) {\n                return { 'range': true };\n            }\n            return null;\n        };\n    }\n}\n"],"sourceRoot":"webpack:///"}