{"version":3,"sources":["webpack:///src/app/product/product-form.component.ts","webpack:///src/app/product/product-form.component.html","webpack:///src/app/product/product-guard.service.ts","webpack:///src/app/product/product-list.component.ts","webpack:///src/app/product/product-list.component.html","webpack:///src/app/product/product.module.ts","webpack:///src/app/product/product.service.ts"],"names":["ProductFormComponent","fb","route","router","productService","breakpointObserver","pageTitle","product","fieldColspan","displayMessage","validationMessages","required","minlength","maxlength","unitPrice","range","unitInStock","observe","HandsetLandscape","HandsetPortrait","subscribe","result","onScreensizeChange","genericValidator","productForm","group","productName","minLength","maxLength","categoryId","sub","params","id","getProduct","getCategories","unsubscribe","controlBlurs","formInputElements","map","formControl","fromEvent","nativeElement","merge","valueChanges","debounceTime","processMessages","onProductRetrieved","error","errorMessage","categories","reset","patchValue","onSaveComplete","confirm","deleteProduct","dirty","valid","p","Object","assign","value","saveProduct","navigate","isLess600","isMatched","isLess1000","console","log","selector","templateUrl","styles","read","ProductDetailGuard","url","path","isNaN","alert","ProductEditGuard","component","get","ProductListComponent","dialog","snackBar","showImage","listFilter","displayedColumns","dataSource","pager","searchFilter","filterValue","trim","toLowerCase","filter","products","productList","e","paginator","sort","getProducts","freshDataList","pageNum","filters","length","match","keys","forEach","k","toLocaleLowerCase","indexOf","searchPanel","toggle","message","action","open","duration","dialogRef","data","title","disableClose","afterClosed","selectedOption","componentInstance","ACTION_CONFIRM","openSnackBar","applyFilter","searchProducts","resetSearchFilter","styleUrls","providers","ProductModule","forChild","canDeactivate","imports","declarations","exports","ProductService","http","backend","basicAction","getAll","extractData","handleError","of","initializeProduct","getByQuery","createProduct","updateProduct","create","update","response","body","json","avatar"],"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","file":"default~order-order-module~product-product-module-es5.js","sourcesContent":["import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  OnDestroy,\n  ViewChildren,\n  ElementRef\n} from \"@angular/core\";\nimport {\n  FormBuilder,\n  FormGroup,\n  Validators,\n  FormControlName\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\n\nimport \"rxjs/add/operator/debounceTime\";\nimport \"rxjs/add/observable/fromEvent\";\nimport \"rxjs/add/observable/merge\";\nimport { Observable } from \"rxjs/Observable\";\nimport { Subscription } from \"rxjs/Subscription\";\n\nimport { Product } from \"./product\";\nimport { ProductService } from \"./product.service\";\n\nimport { NumberValidators } from \"../shared/number.validator\";\nimport { GenericValidator } from \"../shared/generic-validator\";\nimport { Category } from \"./index\";\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'product-form',\n  templateUrl: \"./product-form.component.html\",\n  styles: [\n    `\n    .title-spacer {\n      flex: 1 1 auto;\n    }\n  .form-field{\n      width: 100%;\n      margin-left: 20px;\n      margin-right: 20px;\n    }\n   \n    `\n  ]\n})\nexport class ProductFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  @ViewChildren(FormControlName, { read: ElementRef })\n  formInputElements: ElementRef[];\n\n  pageTitle: string = \"Update Product\";\n  errorMessage: string;\n  productForm: FormGroup;\n\n  product: Product = <Product>{};\n  private sub: Subscription;\n  showImage: boolean;\n  categories: Category[];\n  fieldColspan = 4;\n  // Use with the generic validation messageId class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } } = {\n    product: {\n      required: \"Product name is required.\",\n      minlength: \"Product name must be at least one characters.\",\n      maxlength: \"Product name cannot exceed 200 characters.\"\n    },\n    unitPrice: {\n      range:\n        \"Price of the product must be between 1 (lowest) and 9999 (highest).\"\n    },\n    unitInStock: {\n      range:\n        \"Quantity of the product must be between 1 (lowest) and 2000 (highest).\"\n    }\n  }\n\n  private genericValidator: GenericValidator;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private productService: ProductService,\n    private breakpointObserver: BreakpointObserver\n  ) {\n    breakpointObserver.observe([\n      Breakpoints.HandsetLandscape,\n      Breakpoints.HandsetPortrait\n    ]).subscribe(result => {\n      // console.log(result)\n      this.onScreensizeChange();\n    });\n\n\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    this.productForm = this.fb.group({\n      productName: [\n        \"\",\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(100)\n        ]\n      ],\n      unitPrice: [\"\", NumberValidators.range(1, 99999)],\n      unitInStock: [\"\", NumberValidators.range(1, 2000)],\n      categoryId: [\"\", NumberValidators.range(1, 9999999)],\n    });\n\n    // Read the product Id from the route parameter\n    this.sub = this.route.params.subscribe(params => {\n      let id = +params[\"id\"];\n      this.getProduct(id);\n    });\n\n    this.getCategories();\n  }\n\n  ngOnDestroy(): void {\n    this.sub.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    // Watch for the blur event from any input element on the form.\n    let controlBlurs: Observable<any>[] = this.formInputElements.map(\n      (formControl: ElementRef) =>\n        Observable.fromEvent(formControl.nativeElement, \"blur\")\n    );\n\n    // Merge the blur event observable with the valueChanges observable\n    Observable.merge(this.productForm.valueChanges, ...controlBlurs)\n      .debounceTime(800)\n      .subscribe(() => {\n        this.displayMessage = this.genericValidator.processMessages(\n          this.productForm\n        );\n      });\n  }\n\n  getProduct(id: number): void {\n    this.productService\n      .getProduct(id)\n      .subscribe(\n        (product: Product) => this.onProductRetrieved(product),\n        (error: any) => (this.errorMessage = <any>error)\n      );\n  }\n\n  getCategories(): void {\n    this.productService\n      .getCategories()\n      .subscribe(\n        categories => (this.categories = categories),\n        error => (this.errorMessage = <any>error)\n      );\n  }\n\n  onProductRetrieved(product: Product): void {\n    if (this.productForm) {\n      this.productForm.reset();\n    }\n    this.product = product;\n\n    if (this.product.id === 0) {\n      this.pageTitle = \"Add Product\";\n    } else {\n      this.pageTitle = `Update Product: ${this.product.productName} `;\n    }\n\n    // Update the data on the form\n    this.productForm.patchValue({\n      productName: this.product.productName,\n      unitPrice: this.product.unitPrice,\n      unitInStock: this.product.unitInStock,\n      categoryId: this.product.categoryId\n    });\n  }\n\n  deleteProduct(): void {\n    if (this.product.id === 0) {\n      // Don't delete, it was never saved.\n      this.onSaveComplete();\n    } else {\n      if (confirm(`Really delete the product: ${this.product.productName}?`)) {\n        this.productService\n          .deleteProduct(this.product.id)\n          .subscribe(\n            () => this.onSaveComplete(),\n            (error: any) => (this.errorMessage = <any>error)\n          );\n      }\n    }\n  }\n\n  saveProduct(): void {\n    if (this.productForm.dirty && this.productForm.valid) {\n      // Copy the form values over the product object values\n      let p = Object.assign({}, this.product, this.productForm.value);\n\n      this.productService\n        .saveProduct(p)\n        .subscribe(\n          () => this.onSaveComplete(),\n          (error: any) => (this.errorMessage = <any>error)\n        );\n    } else if (!this.productForm.dirty) {\n      this.onSaveComplete();\n    }\n  }\n\n  onSaveComplete(): void {\n    // Reset the form to clear the flags\n    this.productForm.reset();\n    this.router.navigate([\"/products\"]);\n  }\n\n  onScreensizeChange() {\n    // debugger\n    const isLess600 = this.breakpointObserver.isMatched('(max-width: 599px)');\n    const isLess1000 = this.breakpointObserver.isMatched('(max-width: 959px)');\n    console.log(\n      ` isLess600  ${isLess600} \n        isLess1000 ${isLess1000}  `\n    )\n    if (isLess1000) {\n      if (isLess600) {\n        this.fieldColspan = 12;\n      }\n      else {\n        this.fieldColspan = 6;\n      }\n    }\n    else {\n      this.fieldColspan = 3;\n    }\n  }\n}\n","<!-- <div class=\"panel panel-primary\">\n    <div class=\"panel-heading\">\n        {{pageTitle}}\n    </div>\n\n    <div class=\"panel-body\">         -->\n<form novalidate (ngSubmit)=\"saveProduct()\" [formGroup]=\"productForm\">\n  <mat-card>\n    <!--   <mat-card-header> \n     <mat-card-title class=\"view-card-title\">\n      <h1>{{pageTitle }}</h1>\n    </mat-card-title>\n     </mat-card-header>   -->\n\n    <mat-toolbar style=\"background-color: #FFF\">\n      <mat-toolbar-row>\n        <span class=\"view-card-title\"> {{pageTitle}}</span>\n        <span class=\"title-spacer\"></span>\n\n        <mat-card-actions>\n          <button mat-mini-fab class=\"primary\" style=\"margin-right:10px; background-color:darkgray\" type=\"submit\"\n            [disabled]='!productForm.valid'>\n            <mat-icon>save</mat-icon>\n          </button>\n          <button mat-mini-fab class=\"\" style=\"margin-right:10px; \" [routerLink]=\"['/products']\">\n            <mat-icon>cancel</mat-icon>\n          </button>\n\n        </mat-card-actions>\n\n      </mat-toolbar-row>\n    </mat-toolbar>\n\n    <mat-card-content style=\"margin: 5 0 5 0px;\">\n      <div class=\"form-card\">\n        <mat-grid-list cols=\"12\" rowHeight=\"80px\">\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <mat-select placeholder=\"Select Category\" #categoryIdId formControlName=\"categoryId\"\n                [(value)]=\"product.categoryId\">\n                <mat-option *ngFor=\"let category of categories\" [value]=\"category.id\">\n                  {{category.categoryName}}\n                </mat-option>\n              </mat-select>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput id=\"productNameId\" type=\"text\" placeholder=\"Product Name (required)\"\n                formControlName=\"productName\" />\n              <mat-error *ngIf=\"displayMessage.productName\">\n                {{displayMessage.productName}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput id=\"unitPriceId\" type=\"currency\" placeholder=\"Price (required)\"\n                formControlName=\"unitPrice\" />\n              <mat-error *ngIf=\"displayMessage.unitPrice\">\n                {{displayMessage.unitPrice}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n          <mat-grid-tile [colspan]=\"fieldColspan\">\n            <mat-form-field class=\"form-field\" appearance=\"outline\">\n              <input matInput id=\"unitInStockId\" type=\"number\" placeholder=\"Quantity In Stock (required)\"\n                formControlName=\"unitInStock\" />\n              <mat-error *ngIf=\"displayMessage.unitInStock\">\n                {{displayMessage.unitInStock}}\n              </mat-error>\n            </mat-form-field>\n          </mat-grid-tile>\n        </mat-grid-list>\n    </div>\n\n      <div class='has-error' *ngIf='errorMessage'>{{errorMessage}}</div>\n    </mat-card-content>\n\n\n\n  </mat-card>\n\n</form>\n\n<!-- <div class='has-error' *ngIf='errorMessage'>{{errorMessage}}</div>\n    </div>\n</div> -->\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, CanDeactivate } from '@angular/router';\n\nimport { ProductFormComponent } from './product-form.component';\n\n@Injectable()\nexport class ProductDetailGuard implements CanActivate {\n\n    constructor(private router: Router) {\n    }\n\n    canActivate(route: ActivatedRouteSnapshot): boolean {\n        let id = +route.url[1].path;\n        if (isNaN(id) || id < 1) {\n            alert('Invalid product Id');\n            // start a new navigation to redirect to list pcustomerId\n            this.router.navigate(['/products']);\n            // abort current navigation\n            return false;\n        };\n        return true;\n    }\n}\n\n@Injectable()\nexport class ProductEditGuard implements CanDeactivate<ProductFormComponent> {\n\n    canDeactivate(component: ProductFormComponent): boolean {\n        if (component.productForm.dirty) {\n            let productName = component.productForm.get('productName').value || 'New Product';\n            return confirm(`Navigate away and lose all changes to ${productName}?`);\n        }\n        return true;\n    }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\n\nimport { Product } from './product';\nimport { ProductService } from './product.service';\nimport { PagerService } from '../_services';\nimport { ConfirmDialog } from '../shared';\nimport * as _ from 'lodash';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { MatTableDataSource } from '@angular/material/table';\n\n\n@Component({\n    selector: 'product-list',\n    templateUrl: './product-list.component.html',\n    styleUrls: ['./product-list.component.css'],\n    providers: [ConfirmDialog]\n})\nexport class ProductListComponent implements OnInit {\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n    pageTitle: string = 'Products';\n\n    showImage: boolean = false;\n    listFilter: any = {};\n    errorMessage: string;\n\n    products: Product[];\n    productList: Product[];\n\n    displayedColumns = [\"productName\", \"unitPrice\", \"unitInStock\", \"categoryName\", \"id\"];\n    dataSource: any = null;\n    pager: any = {};\n    pagedItems: any[];\n    searchFilter: any = {};\n    selectedOption: string;\n\n\n\n    constructor(\n        private productService: ProductService,\n        // private pagerService: PagerService,\n        public dialog: MatDialog, public snackBar: MatSnackBar) {\n    }\n\n    toggleImage(): void {\n        this.showImage = !this.showImage;\n    }\n\n    applyFilter(filterValue: string) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // MatTableDataSource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n    }\n\n    freshDataList(products: Product[]) {\n        this.products = products;\n\n        this.productList = products.map(e => {\n            const product = e;\n            e[\"categoryName\"] = e[\"category\"][\"categoryName\"];\n            return product;\n        });\n\n        this.dataSource = new MatTableDataSource(this.products);\n        this.dataSource.paginator = this.paginator;\n        this.dataSource.sort = this.sort;\n    }\n\n\n    ngOnInit(): void {\n        this.productService.getProducts()\n            .subscribe(products => {\n                this.freshDataList(products);\n            },\n            error => this.errorMessage = <any>error);\n\n        this.searchFilter = {};\n        this.listFilter = {};\n    }\n\n    getProducts(pageNum?: number) {\n        this.productService.getProducts()\n            .subscribe(products => {\n                this.freshDataList(products);\n            },\n            error => this.errorMessage = <any>error);\n    }\n\n    searchProducts(filters: any) {\n        if (filters) {\n            this.productService.getProducts()\n                .subscribe(products => {\n                    this.products = products;\n                    console.log(this.products.length)\n                    this.products = this.products.filter((product: Product) => {\n                        let match = true;\n\n                        Object.keys(filters).forEach((k) => {\n                            match = match && filters[k] ?\n                                product[k] && product[k].toLocaleLowerCase().indexOf(filters[k].toLocaleLowerCase()) > -1 : match;\n                        })\n                        return match;\n                    });\n                    this.freshDataList(products);\n                },\n                error => this.errorMessage = <any>error);\n        }\n\n    }\n\n    resetListFilter() {\n        this.listFilter = {};\n        this.getProducts();\n    }\n\n    reset() {\n        this.listFilter = {};\n        this.searchFilter = {};\n        this.getProducts();\n    }\n\n    resetSearchFilter(searchPanel: any) {\n        searchPanel.toggle();\n        this.searchFilter = {};\n        this.getProducts();\n    }\n\n    openSnackBar(message: string, action: string) {\n        this.snackBar.open(message, action, {\n            duration: 1500,\n        });\n    }\n\n    openDialog(id: number) {\n        let dialogRef = this.dialog.open(ConfirmDialog,\n            { data: { title: 'Dialog', message: 'Are you sure to delete this item?' } });\n        dialogRef.disableClose = true;\n\n\n        dialogRef.afterClosed().subscribe(result => {\n            this.selectedOption = result;\n\n            if (this.selectedOption === dialogRef.componentInstance.ACTION_CONFIRM) {\n                this.productService.deleteProduct(id).subscribe(\n                    () => {\n                        this.productService.getProducts()\n                            .subscribe(products => {\n                                this.freshDataList(products);\n                            },\n                            error => this.errorMessage = <any>error);\n                        this.openSnackBar(\"The item has been deleted successfully. \", \"Close\");\n                    },\n                    (error: any) => {\n                        this.errorMessage = <any>error;\n                        console.log(this.errorMessage);\n                        this.openSnackBar(\"This item has not been deleted successfully. Please try again.\", \"Close\");\n                    }\n                );\n            }\n        });\n    }\n}\n","<!-- <mat-sidenav-container> -->\n<mat-card class='light' style=\"height: 100%;\">\n\n  <mat-card-header>\n    <mat-card-title class=\"view-card-title\">\n      <h1>{{pageTitle }}</h1>\n    </mat-card-title>\n  </mat-card-header>\n  <mat-toolbar>\n    <mat-toolbar-row>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#e07c9e\" [routerLink]=\"['/products/edit', 0]\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:#a28b6e\" (click)=\"sidenav.toggle()\">\n        <mat-icon>search</mat-icon>\n      </button>\n      <button mat-mini-fab style=\"margin-right:10px; background-color:darkgray\" (click)=\"reset()\">\n        <mat-icon>refresh</mat-icon>\n      </button>\n\n      <span class=\"title-spacer\"></span>\n      <mat-form-field appearance=\"standard\" class=\"search-form-fileld\">\n        <mat-label>Filter</mat-label>\n        <input matInput (keyup)=\"applyFilter($event.target.value)\">\n        <mat-icon>filter_list</mat-icon>\n      </mat-form-field>\n    </mat-toolbar-row>\n  </mat-toolbar>\n\n  <mat-table #table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"productName\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Product Name </mat-header-cell>\n      <mat-cell *matCellDef=\"let product\">\n        <!-- <a [routerLink]=\"['/product', product.id]\"> -->\n        {{product.productName}}\n        <!-- </a> -->\n      </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"unitPrice\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Price </mat-header-cell>\n      <mat-cell *matCellDef=\"let product\"> {{ product.unitPrice | currency:'AUD'}} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"unitInStock\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Quantity In Stock </mat-header-cell>\n      <mat-cell *matCellDef=\"let product\"> {{ product.unitInStock | number: '0.0-0' }} </mat-cell>\n    </ng-container>\n    <ng-container matColumnDef=\"categoryName\">\n      <mat-header-cell *matHeaderCellDef mat-sort-header> Category </mat-header-cell>\n      <mat-cell *matCellDef=\"let product\"> {{product.category.categoryName}}</mat-cell>\n    </ng-container>\n\n    <ng-container matColumnDef=\"id\">\n      <mat-header-cell *matHeaderCellDef style=\"justify-content:right;\">\n        <!-- <button mat-button style=\"color:white; background-color:darkgrey\" (click)=\"resetListFilter()\">Reset</button> -->\n      </mat-header-cell>\n      <mat-cell *matCellDef=\"let product\" style=\"justify-content:right;\">\n        <button mat-mini-fab style=\"background-color:teal; min-height: 30px;   margin: 5px;\"\n          [routerLink]=\"['/products/edit', product.id]\">\n          <mat-icon>edit</mat-icon>\n        </button>\n        <button mat-mini-fab style=\"background-color:lightblue; min-height: 30px;  margin: 5px;\"\n          (click)=\"openDialog(product.id)\">\n          <mat-icon>delete</mat-icon>\n        </button>\n      </mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n  </mat-table>\n  <mat-paginator #paginator [pageSize]=\"10\" [pageSizeOptions]=\"[5, 10]\">\n  </mat-paginator>\n\n</mat-card>\n<mat-sidenav class=\"search-panel\" position=\"end\" dark #sidenav mode=\"push\" opened=\"false\">\n\n  <mat-card class=\"profile-card\">\n    <mat-card-header>\n      <div mat-card-avatar class=\"avatar\">\n        <mat-icon>search</mat-icon>\n      </div>\n      <mat-card-title>\n        Advanced Search\n      </mat-card-title>\n    </mat-card-header>\n  </mat-card>\n  <mat-nav-list style=\"margin-left:20px;\">\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Product Name\" style=\"width:200px;\" name=\"product\"\n        [(ngModel)]=\"searchFilter.productName\" #product />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Price\" style=\"width:200px;\" name=\"price\" [(ngModel)]=\"searchFilter.price\"\n        #price />\n    </mat-form-field>\n    <mat-form-field>\n      <input matInput type=\"text\" placeholder=\"Qunantity\" style=\"width:200px;\" name=\"quantity\"\n        [(ngModel)]=\"searchFilter.quantity\" #price />\n    </mat-form-field>\n\n  </mat-nav-list>\n\n  <mat-divider></mat-divider>\n  <mat-card-header>\n    <mat-action-list>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkgreen; margin:5px;\"\n        (click)=\"searchProducts(searchFilter);sidenav.toggle()\">\n        <mat-icon>search</mat-icon>Search\n      </button>\n      <button mat-raised-button style=\"color:lightgrey; background-color:darkred;margin:5px;\"\n        (click)=\"resetSearchFilter(sidenav)\">\n        <mat-icon>refresh</mat-icon>Reset\n      </button>\n    </mat-action-list>\n  </mat-card-header>\n</mat-sidenav>\n<!-- </mat-sidenav-container> -->\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\n\nimport { ProductListComponent } from \"./product-list.component\";\nimport { ProductDetailGuard, ProductEditGuard } from \"./product-guard.service\";\nimport { ProductFormComponent } from \"./product-form.component\";\n\nimport { ProductService } from \"./product.service\";\nimport { SharedModule } from \"../shared/shared.module\";\nimport { MaterialModule } from \"../shared/material.module\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ReactiveFormsModule,\n    MaterialModule,\n    RouterModule.forChild([\n      { path: \"\", component: ProductListComponent },\n      {\n        path: \"edit/:id\",\n        canDeactivate: [ProductEditGuard],\n        component: ProductFormComponent\n      }\n    ])\n  ],\n  declarations: [\n    /**\n     * Components / Directives/ Pipes\n     */\n    ProductListComponent,\n    ProductFormComponent\n  ],\n  providers: [ProductService, ProductDetailGuard, ProductEditGuard],\n  exports: [\n    ProductListComponent,\n    ProductFormComponent,\n  ]\n})\nexport class ProductModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BackendService } from '../_services'\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/observable/of';\nimport { Product, Category } from './product';\n\n@Injectable()\nexport class ProductService {\n  private basicAction = 'products/';\n\n  constructor(private http: HttpClient, private backend: BackendService) { }\n\n  getProducts(): Observable<Product[]> {\n    // return this.http.get(this.baseUrl)\n    const action = `${this.basicAction}?_expand=category`;\n    return this.backend.getAll(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  getProduct(id: number): Observable<Product> {\n    if (id === 0) {\n      return Observable.of(this.initializeProduct());\n    };\n    const action = `${this.basicAction}${id}?_expand=category`;\n    return this.backend.getByQuery(action)\n      .map(this.extractData)\n      // .do(data => console.log('getProduct: ' + JSON.stringify(data)))\n      .catch(this.handleError);\n  }\n\n  deleteProduct(id: number): Observable<Response> {\n    const action = `${this.basicAction}${id}`;\n    return this.backend.delete(action)\n      .catch(this.handleError);\n  }\n\n  saveProduct(product: Product): Observable<Product> {\n    // let headers = new Headers({ 'Content-Type': 'application/json' });\n    // let options = new RequestOptions({ headers: headers });\n\n    if (product.id === 0) {\n      return this.createProduct(product);\n    }\n    return this.updateProduct(product);\n  }\n\n  getCategories(): Observable<Category[]> {\n    // return this.http.get(this.baseUrl)\n    const action = 'categories/'\n    return this.backend.getAll(action)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private createProduct(product: Product): Observable<Product> {\n    product.id = null;\n    return this.backend.create(this.basicAction, product)\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  private updateProduct(product: Product): Observable<Product> {\n    const action = `${this.basicAction}${product.id}`;\n    return this.backend.update(action, product)\n      .map(() => product)\n      .catch(this.handleError);\n  }\n\n  private extractData(response: Response) {\n    let body : any = response.json ? response.json() : response;\n    return body.data ? body.data : (body || {});\n  }\n\n  private handleError(error: Response): Observable<any> {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    console.error(error);\n    return Observable.throw(error.json() || 'Server error');\n  }\n\n  initializeProduct(): Product {\n    // Return an initialized object\n    return {\n      id: 0,\n      avatar: null,\n      categoryId: 0,\n      productName: null,\n      unitPrice: 0,\n      unitInStock: 0,\n    };\n  }\n}\n"]}